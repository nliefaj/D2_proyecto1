
Master_pj1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  000010c4  00001158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  0080012e  0080012e  00001186  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001186  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014d4  00000000  00000000  0000131c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a48  00000000  00000000  000027f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000af2  00000000  00000000  00003238  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  00003d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000602  00000000  00000000  00003f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000085f  00000000  00000000  00004502  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004d61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 ec       	ldi	r30, 0xC4	; 196
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 32       	cpi	r26, 0x2E	; 46
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ae e2       	ldi	r26, 0x2E	; 46
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ae 34       	cpi	r26, 0x4E	; 78
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 39 02 	call	0x472	; 0x472 <main>
      9e:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUART9600>:
 *  Author: njfg0
 */ 
#include "com_uart.h"
void initUART9600(void){
	//configurar pines tx y rx
	DDRD &=~(1<<DDD0);//entrada
      a6:	8a b1       	in	r24, 0x0a	; 10
      a8:	8e 7f       	andi	r24, 0xFE	; 254
      aa:	8a b9       	out	0x0a, r24	; 10
	DDRD|=(1<<DDD1);//salida Tx
      ac:	8a b1       	in	r24, 0x0a	; 10
      ae:	82 60       	ori	r24, 0x02	; 2
      b0:	8a b9       	out	0x0a, r24	; 10
	
	UBRR0H = 0;
      b2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 103;
      b6:	87 e6       	ldi	r24, 0x67	; 103
      b8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	//configurar registro A modo fast u2x0 en 1
	UCSR0A=0;
      bc:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	//UCSR0A|=(1<<U2X0);
	
	//configurar registro B, habilotar isr rx, bits para habilitar RX y TX
	UCSR0B=0;
      c0:	e1 ec       	ldi	r30, 0xC1	; 193
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	10 82       	st	Z, r1
	UCSR0B|=(1<<TXEN0);
      c6:	80 81       	ld	r24, Z
      c8:	88 60       	ori	r24, 0x08	; 8
      ca:	80 83       	st	Z, r24
	
	//Configurar registro C<Frame asincrono 8 bits de datos sin pariedad, 1 bit de stop
	UCSR0C=0;
      cc:	e2 ec       	ldi	r30, 0xC2	; 194
      ce:	f0 e0       	ldi	r31, 0x00	; 0
      d0:	10 82       	st	Z, r1
	UCSR0C|=(1<<UCSZ01)|(1<<UCSZ00);
      d2:	80 81       	ld	r24, Z
      d4:	86 60       	ori	r24, 0x06	; 6
      d6:	80 83       	st	Z, r24
      d8:	08 95       	ret

000000da <writetxtUART>:
	
	
	
}

void writetxtUART(char* texto){
      da:	ac 01       	movw	r20, r24
	uint8_t i;
	for (i=0;texto[i]!='\0';i++){
      dc:	20 e0       	ldi	r18, 0x00	; 0
      de:	07 c0       	rjmp	.+14     	; 0xee <writetxtUART+0x14>
		while(!(UCSR0A&(1<<UDRE0)));//esperar hasta que el udre0 esté en 1
      e0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
      e4:	95 ff       	sbrs	r25, 5
      e6:	fc cf       	rjmp	.-8      	; 0xe0 <writetxtUART+0x6>
		UDR0=texto[i];//cuando i nulo se acaba
      e8:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
}

void writetxtUART(char* texto){
	uint8_t i;
	for (i=0;texto[i]!='\0';i++){
      ec:	2f 5f       	subi	r18, 0xFF	; 255
      ee:	fa 01       	movw	r30, r20
      f0:	e2 0f       	add	r30, r18
      f2:	f1 1d       	adc	r31, r1
      f4:	30 81       	ld	r19, Z
      f6:	31 11       	cpse	r19, r1
      f8:	f3 cf       	rjmp	.-26     	; 0xe0 <writetxtUART+0x6>
		while(!(UCSR0A&(1<<UDRE0)));//esperar hasta que el udre0 esté en 1
		UDR0=texto[i];//cuando i nulo se acaba
	}
}
      fa:	08 95       	ret

000000fc <I2C_Master_Init>:
		}else{
		return estado;
	}
	
	
}
      fc:	0f 93       	push	r16
      fe:	1f 93       	push	r17
     100:	cf 93       	push	r28
     102:	8b 01       	movw	r16, r22
     104:	9c 01       	movw	r18, r24
     106:	c4 2f       	mov	r28, r20
     108:	87 b1       	in	r24, 0x07	; 7
     10a:	8f 7c       	andi	r24, 0xCF	; 207
     10c:	87 b9       	out	0x07, r24	; 7
     10e:	44 30       	cpi	r20, 0x04	; 4
     110:	79 f0       	breq	.+30     	; 0x130 <I2C_Master_Init+0x34>
     112:	18 f4       	brcc	.+6      	; 0x11a <I2C_Master_Init+0x1e>
     114:	41 30       	cpi	r20, 0x01	; 1
     116:	31 f0       	breq	.+12     	; 0x124 <I2C_Master_Init+0x28>
     118:	23 c0       	rjmp	.+70     	; 0x160 <I2C_Master_Init+0x64>
     11a:	40 31       	cpi	r20, 0x10	; 16
     11c:	91 f0       	breq	.+36     	; 0x142 <I2C_Master_Init+0x46>
     11e:	40 34       	cpi	r20, 0x40	; 64
     120:	c9 f0       	breq	.+50     	; 0x154 <I2C_Master_Init+0x58>
     122:	1e c0       	rjmp	.+60     	; 0x160 <I2C_Master_Init+0x64>
     124:	e9 eb       	ldi	r30, 0xB9	; 185
     126:	f0 e0       	ldi	r31, 0x00	; 0
     128:	80 81       	ld	r24, Z
     12a:	8c 7f       	andi	r24, 0xFC	; 252
     12c:	80 83       	st	Z, r24
     12e:	1e c0       	rjmp	.+60     	; 0x16c <I2C_Master_Init+0x70>
     130:	e9 eb       	ldi	r30, 0xB9	; 185
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	80 81       	ld	r24, Z
     136:	8d 7f       	andi	r24, 0xFD	; 253
     138:	80 83       	st	Z, r24
     13a:	80 81       	ld	r24, Z
     13c:	81 60       	ori	r24, 0x01	; 1
     13e:	80 83       	st	Z, r24
     140:	15 c0       	rjmp	.+42     	; 0x16c <I2C_Master_Init+0x70>
     142:	e9 eb       	ldi	r30, 0xB9	; 185
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	80 81       	ld	r24, Z
     148:	8e 7f       	andi	r24, 0xFE	; 254
     14a:	80 83       	st	Z, r24
     14c:	80 81       	ld	r24, Z
     14e:	82 60       	ori	r24, 0x02	; 2
     150:	80 83       	st	Z, r24
     152:	0c c0       	rjmp	.+24     	; 0x16c <I2C_Master_Init+0x70>
     154:	e9 eb       	ldi	r30, 0xB9	; 185
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	83 60       	ori	r24, 0x03	; 3
     15c:	80 83       	st	Z, r24
     15e:	06 c0       	rjmp	.+12     	; 0x16c <I2C_Master_Init+0x70>
     160:	e9 eb       	ldi	r30, 0xB9	; 185
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	80 81       	ld	r24, Z
     166:	8c 7f       	andi	r24, 0xFC	; 252
     168:	80 83       	st	Z, r24
     16a:	c1 e0       	ldi	r28, 0x01	; 1
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	74 e2       	ldi	r23, 0x24	; 36
     170:	84 ef       	ldi	r24, 0xF4	; 244
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	a9 01       	movw	r20, r18
     176:	98 01       	movw	r18, r16
     178:	0e 94 45 05 	call	0xa8a	; 0xa8a <__udivmodsi4>
     17c:	ca 01       	movw	r24, r20
     17e:	b9 01       	movw	r22, r18
     180:	60 51       	subi	r22, 0x10	; 16
     182:	71 09       	sbc	r23, r1
     184:	81 09       	sbc	r24, r1
     186:	91 09       	sbc	r25, r1
     188:	4c 2f       	mov	r20, r28
     18a:	50 e0       	ldi	r21, 0x00	; 0
     18c:	9a 01       	movw	r18, r20
     18e:	22 0f       	add	r18, r18
     190:	33 1f       	adc	r19, r19
     192:	03 2e       	mov	r0, r19
     194:	00 0c       	add	r0, r0
     196:	44 0b       	sbc	r20, r20
     198:	55 0b       	sbc	r21, r21
     19a:	0e 94 45 05 	call	0xa8a	; 0xa8a <__udivmodsi4>
     19e:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     1a2:	ec eb       	ldi	r30, 0xBC	; 188
     1a4:	f0 e0       	ldi	r31, 0x00	; 0
     1a6:	80 81       	ld	r24, Z
     1a8:	84 60       	ori	r24, 0x04	; 4
     1aa:	80 83       	st	Z, r24
     1ac:	cf 91       	pop	r28
     1ae:	1f 91       	pop	r17
     1b0:	0f 91       	pop	r16
     1b2:	08 95       	ret

000001b4 <I2C_Master_Start>:
     1b4:	84 ea       	ldi	r24, 0xA4	; 164
     1b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1ba:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1be:	88 23       	and	r24, r24
     1c0:	e4 f7       	brge	.-8      	; 0x1ba <I2C_Master_Start+0x6>
     1c2:	08 95       	ret

000001c4 <I2C_Master_Stop>:
     1c4:	84 e9       	ldi	r24, 0x94	; 148
     1c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1ca:	08 95       	ret

000001cc <I2C_Master_Write>:
     1cc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     1d0:	84 e8       	ldi	r24, 0x84	; 132
     1d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1d6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1da:	88 23       	and	r24, r24
     1dc:	e4 f7       	brge	.-8      	; 0x1d6 <I2C_Master_Write+0xa>
     1de:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     1e2:	88 7f       	andi	r24, 0xF8	; 248
     1e4:	88 31       	cpi	r24, 0x18	; 24
     1e6:	31 f0       	breq	.+12     	; 0x1f4 <I2C_Master_Write+0x28>
     1e8:	88 32       	cpi	r24, 0x28	; 40
     1ea:	31 f0       	breq	.+12     	; 0x1f8 <I2C_Master_Write+0x2c>
     1ec:	80 34       	cpi	r24, 0x40	; 64
     1ee:	29 f4       	brne	.+10     	; 0x1fa <I2C_Master_Write+0x2e>
     1f0:	81 e0       	ldi	r24, 0x01	; 1
     1f2:	08 95       	ret
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	08 95       	ret
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	08 95       	ret

000001fc <I2C_Master_Read>:

uint8_t I2C_Master_Read(uint8_t *buffer, uint8_t ack){
     1fc:	dc 01       	movw	r26, r24
	uint8_t estado;
	if(ack){
     1fe:	66 23       	and	r22, r22
     200:	31 f0       	breq	.+12     	; 0x20e <I2C_Master_Read+0x12>
		TWCR|=(1<<TWEA);
     202:	ec eb       	ldi	r30, 0xBC	; 188
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	90 81       	ld	r25, Z
     208:	90 64       	ori	r25, 0x40	; 64
     20a:	90 83       	st	Z, r25
     20c:	05 c0       	rjmp	.+10     	; 0x218 <I2C_Master_Read+0x1c>
		}else{
		TWCR&=~(1<<TWEA);
     20e:	ec eb       	ldi	r30, 0xBC	; 188
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	90 81       	ld	r25, Z
     214:	9f 7b       	andi	r25, 0xBF	; 191
     216:	90 83       	st	Z, r25
	}
	
	TWCR|=(1<<TWINT);//INICIA LECTURA
     218:	ec eb       	ldi	r30, 0xBC	; 188
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	90 81       	ld	r25, Z
     21e:	90 68       	ori	r25, 0x80	; 128
     220:	90 83       	st	Z, r25
	while(!(TWCR&(1<<TWINT)));//ESPERA A TERMINAR DE LEER
     222:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     226:	99 23       	and	r25, r25
     228:	e4 f7       	brge	.-8      	; 0x222 <I2C_Master_Read+0x26>
	estado=TWSR&0xF8; //VERIFICAR ESTADO
     22a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     22e:	98 7f       	andi	r25, 0xF8	; 248
	
	//verifica si el dato fue ledio con ACK o sin ACK
	if(estado==0x58||estado==0x50){
     230:	98 35       	cpi	r25, 0x58	; 88
     232:	11 f0       	breq	.+4      	; 0x238 <I2C_Master_Read+0x3c>
     234:	90 35       	cpi	r25, 0x50	; 80
     236:	29 f4       	brne	.+10     	; 0x242 <I2C_Master_Read+0x46>
		*buffer=TWDR;
     238:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     23c:	8c 93       	st	X, r24
		return 1;
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	08 95       	ret
		}else{
		return estado;
     242:	89 2f       	mov	r24, r25
	}
}
     244:	08 95       	ret

00000246 <port_disp>:
	//E=0;
	PORTD&=~(1<<PORTD3);
}

void port_disp(char a){
	if (a&1)
     246:	80 ff       	sbrs	r24, 0
     248:	04 c0       	rjmp	.+8      	; 0x252 <port_disp+0xc>
	PORTD|=(1<<PORTD4);
     24a:	9b b1       	in	r25, 0x0b	; 11
     24c:	90 61       	ori	r25, 0x10	; 16
     24e:	9b b9       	out	0x0b, r25	; 11
     250:	03 c0       	rjmp	.+6      	; 0x258 <port_disp+0x12>
	else
	PORTD&=~(1<<PORTD4);
     252:	9b b1       	in	r25, 0x0b	; 11
     254:	9f 7e       	andi	r25, 0xEF	; 239
     256:	9b b9       	out	0x0b, r25	; 11
	
	if (a&2)
     258:	81 ff       	sbrs	r24, 1
     25a:	04 c0       	rjmp	.+8      	; 0x264 <port_disp+0x1e>
	PORTD|=(1<<PORTD5);
     25c:	9b b1       	in	r25, 0x0b	; 11
     25e:	90 62       	ori	r25, 0x20	; 32
     260:	9b b9       	out	0x0b, r25	; 11
     262:	03 c0       	rjmp	.+6      	; 0x26a <port_disp+0x24>
	else
	PORTD&=~(1<<PORTD5);
     264:	9b b1       	in	r25, 0x0b	; 11
     266:	9f 7d       	andi	r25, 0xDF	; 223
     268:	9b b9       	out	0x0b, r25	; 11
	
	if (a&4)
     26a:	82 ff       	sbrs	r24, 2
     26c:	04 c0       	rjmp	.+8      	; 0x276 <port_disp+0x30>
	PORTD|=(1<<PORTD6);
     26e:	9b b1       	in	r25, 0x0b	; 11
     270:	90 64       	ori	r25, 0x40	; 64
     272:	9b b9       	out	0x0b, r25	; 11
     274:	03 c0       	rjmp	.+6      	; 0x27c <port_disp+0x36>
	else
	PORTD&=~(1<<PORTD6);
     276:	9b b1       	in	r25, 0x0b	; 11
     278:	9f 7b       	andi	r25, 0xBF	; 191
     27a:	9b b9       	out	0x0b, r25	; 11
	
	if (a&8)
     27c:	83 ff       	sbrs	r24, 3
     27e:	04 c0       	rjmp	.+8      	; 0x288 <port_disp+0x42>
	PORTD|=(1<<PORTD7);
     280:	9b b1       	in	r25, 0x0b	; 11
     282:	90 68       	ori	r25, 0x80	; 128
     284:	9b b9       	out	0x0b, r25	; 11
     286:	03 c0       	rjmp	.+6      	; 0x28e <port_disp+0x48>
	else
	PORTD&=~(1<<PORTD7);
     288:	9b b1       	in	r25, 0x0b	; 11
     28a:	9f 77       	andi	r25, 0x7F	; 127
     28c:	9b b9       	out	0x0b, r25	; 11
	
	if (a&16)
     28e:	84 ff       	sbrs	r24, 4
     290:	04 c0       	rjmp	.+8      	; 0x29a <port_disp+0x54>
	PORTB|=(1<<PORTB0);
     292:	95 b1       	in	r25, 0x05	; 5
     294:	91 60       	ori	r25, 0x01	; 1
     296:	95 b9       	out	0x05, r25	; 5
     298:	03 c0       	rjmp	.+6      	; 0x2a0 <port_disp+0x5a>
	else
	PORTB&=~(1<<PORTB0);
     29a:	95 b1       	in	r25, 0x05	; 5
     29c:	9e 7f       	andi	r25, 0xFE	; 254
     29e:	95 b9       	out	0x05, r25	; 5
	
	if (a&32)
     2a0:	85 ff       	sbrs	r24, 5
     2a2:	04 c0       	rjmp	.+8      	; 0x2ac <port_disp+0x66>
	PORTB|=(1<<PORTB1);
     2a4:	95 b1       	in	r25, 0x05	; 5
     2a6:	92 60       	ori	r25, 0x02	; 2
     2a8:	95 b9       	out	0x05, r25	; 5
     2aa:	03 c0       	rjmp	.+6      	; 0x2b2 <port_disp+0x6c>
	else
	PORTB&=~(1<<PORTB1);
     2ac:	95 b1       	in	r25, 0x05	; 5
     2ae:	9d 7f       	andi	r25, 0xFD	; 253
     2b0:	95 b9       	out	0x05, r25	; 5
	
	if (a&64)
     2b2:	86 ff       	sbrs	r24, 6
     2b4:	04 c0       	rjmp	.+8      	; 0x2be <port_disp+0x78>
	PORTB|=(1<<PORTB2);
     2b6:	95 b1       	in	r25, 0x05	; 5
     2b8:	94 60       	ori	r25, 0x04	; 4
     2ba:	95 b9       	out	0x05, r25	; 5
     2bc:	03 c0       	rjmp	.+6      	; 0x2c4 <port_disp+0x7e>
	else
	PORTB&=~(1<<PORTB2);
     2be:	95 b1       	in	r25, 0x05	; 5
     2c0:	9b 7f       	andi	r25, 0xFB	; 251
     2c2:	95 b9       	out	0x05, r25	; 5
	
	if (a&128)
     2c4:	88 23       	and	r24, r24
     2c6:	24 f4       	brge	.+8      	; 0x2d0 <port_disp+0x8a>
	PORTB|=(1<<PORTB3);
     2c8:	85 b1       	in	r24, 0x05	; 5
     2ca:	88 60       	ori	r24, 0x08	; 8
     2cc:	85 b9       	out	0x05, r24	; 5
     2ce:	08 95       	ret
	else
	PORTB&=~(1<<PORTB3);
     2d0:	85 b1       	in	r24, 0x05	; 5
     2d2:	87 7f       	andi	r24, 0xF7	; 247
     2d4:	85 b9       	out	0x05, r24	; 5
     2d6:	08 95       	ret

000002d8 <comandos_LCD>:
	comandos_LCD(0b0001);
}

void comandos_LCD(char a){
	//RS=0;
	PORTD&=~(1<<PORTD2);
     2d8:	9b b1       	in	r25, 0x0b	; 11
     2da:	9b 7f       	andi	r25, 0xFB	; 251
     2dc:	9b b9       	out	0x0b, r25	; 11
	port_disp(a);
     2de:	0e 94 23 01 	call	0x246	; 0x246 <port_disp>
	//enable=1;
	PORTD|=(1<<PORTD3);
     2e2:	8b b1       	in	r24, 0x0b	; 11
     2e4:	88 60       	ori	r24, 0x08	; 8
     2e6:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2e8:	8f e7       	ldi	r24, 0x7F	; 127
     2ea:	9e e3       	ldi	r25, 0x3E	; 62
     2ec:	01 97       	sbiw	r24, 0x01	; 1
     2ee:	f1 f7       	brne	.-4      	; 0x2ec <comandos_LCD+0x14>
     2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <comandos_LCD+0x1a>
     2f2:	00 00       	nop
	_delay_ms(4);
	//E=0;
	PORTD&=~(1<<PORTD3);
     2f4:	8b b1       	in	r24, 0x0b	; 11
     2f6:	87 7f       	andi	r24, 0xF7	; 247
     2f8:	8b b9       	out	0x0b, r24	; 11
     2fa:	08 95       	ret

000002fc <initLCD8b>:
 * Created: 2/27/2025 8:30:29 PM
 *  Author: njfg0
 */ 
#include "lcd.h"
void initLCD8b(void){
	DDRD|=(1<<DDD7)|(1<<DDD6)|(1<<DDD5)|(1<<DDD4)|(1<<DDD3)|(1<<DDD2);
     2fc:	8a b1       	in	r24, 0x0a	; 10
     2fe:	8c 6f       	ori	r24, 0xFC	; 252
     300:	8a b9       	out	0x0a, r24	; 10
	DDRB|=(1<<DDB0)|(1<<DDB1)|(1<<DDB2)|(1<<DDB3);
     302:	84 b1       	in	r24, 0x04	; 4
     304:	8f 60       	ori	r24, 0x0F	; 15
     306:	84 b9       	out	0x04, r24	; 4
	PORTB=0;
     308:	15 b8       	out	0x05, r1	; 5
	PORTD=0;
     30a:	1b b8       	out	0x0b, r1	; 11
	
	port_disp(0x00);
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	0e 94 23 01 	call	0x246	; 0x246 <port_disp>
     312:	2f ef       	ldi	r18, 0xFF	; 255
     314:	89 ef       	ldi	r24, 0xF9	; 249
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	21 50       	subi	r18, 0x01	; 1
     31a:	80 40       	sbci	r24, 0x00	; 0
     31c:	90 40       	sbci	r25, 0x00	; 0
     31e:	e1 f7       	brne	.-8      	; 0x318 <initLCD8b+0x1c>
     320:	00 c0       	rjmp	.+0      	; 0x322 <initLCD8b+0x26>
     322:	00 00       	nop
	_delay_ms(20);
	
	//function set
	comandos_LCD(0b00111000);
     324:	88 e3       	ldi	r24, 0x38	; 56
     326:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <comandos_LCD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     32a:	8f e8       	ldi	r24, 0x8F	; 143
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	01 97       	sbiw	r24, 0x01	; 1
     330:	f1 f7       	brne	.-4      	; 0x32e <initLCD8b+0x32>
     332:	00 c0       	rjmp	.+0      	; 0x334 <initLCD8b+0x38>
     334:	00 00       	nop
	_delay_us(100);
	
	//display on/off
	comandos_LCD(0b1100);
     336:	8c e0       	ldi	r24, 0x0C	; 12
     338:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <comandos_LCD>
     33c:	8f e8       	ldi	r24, 0x8F	; 143
     33e:	91 e0       	ldi	r25, 0x01	; 1
     340:	01 97       	sbiw	r24, 0x01	; 1
     342:	f1 f7       	brne	.-4      	; 0x340 <initLCD8b+0x44>
     344:	00 c0       	rjmp	.+0      	; 0x346 <initLCD8b+0x4a>
     346:	00 00       	nop
	_delay_us(100);
	
	//Entry mode
	comandos_LCD(0b0110);
     348:	86 e0       	ldi	r24, 0x06	; 6
     34a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <comandos_LCD>
     34e:	8f e8       	ldi	r24, 0x8F	; 143
     350:	91 e0       	ldi	r25, 0x01	; 1
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	f1 f7       	brne	.-4      	; 0x352 <initLCD8b+0x56>
     356:	00 c0       	rjmp	.+0      	; 0x358 <initLCD8b+0x5c>
     358:	00 00       	nop
	_delay_us(100);
	
	//clear display
	comandos_LCD(0b0001);
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <comandos_LCD>
     360:	08 95       	ret

00000362 <LCD_write_char>:
}

void LCD_write_char(char d){
	//manda y escribe el mensaje
	//RS=1
	PORTD|=(1<<PORTD2);
     362:	9b b1       	in	r25, 0x0b	; 11
     364:	94 60       	ori	r25, 0x04	; 4
     366:	9b b9       	out	0x0b, r25	; 11
	port_disp(d);
     368:	0e 94 23 01 	call	0x246	; 0x246 <port_disp>
	//E=1
	PORTD|=(1<<PORTD3);
     36c:	8b b1       	in	r24, 0x0b	; 11
     36e:	88 60       	ori	r24, 0x08	; 8
     370:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     372:	8f e7       	ldi	r24, 0x7F	; 127
     374:	9e e3       	ldi	r25, 0x3E	; 62
     376:	01 97       	sbiw	r24, 0x01	; 1
     378:	f1 f7       	brne	.-4      	; 0x376 <LCD_write_char+0x14>
     37a:	00 c0       	rjmp	.+0      	; 0x37c <LCD_write_char+0x1a>
     37c:	00 00       	nop
	_delay_ms(4);
	//E=0
	PORTD&=~(1<<PORTD3);
     37e:	8b b1       	in	r24, 0x0b	; 11
     380:	87 7f       	andi	r24, 0xF7	; 247
     382:	8b b9       	out	0x0b, r24	; 11
     384:	08 95       	ret

00000386 <LCD_write_String>:
	
}

void LCD_write_String(char *a){
     386:	0f 93       	push	r16
     388:	1f 93       	push	r17
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	8c 01       	movw	r16, r24
	int i;
	for (i=0;a[i]!='\0';i++)
     390:	c0 e0       	ldi	r28, 0x00	; 0
     392:	d0 e0       	ldi	r29, 0x00	; 0
     394:	03 c0       	rjmp	.+6      	; 0x39c <LCD_write_String+0x16>
	LCD_write_char(a[i]);
     396:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_write_char>
	
}

void LCD_write_String(char *a){
	int i;
	for (i=0;a[i]!='\0';i++)
     39a:	21 96       	adiw	r28, 0x01	; 1
     39c:	f8 01       	movw	r30, r16
     39e:	ec 0f       	add	r30, r28
     3a0:	fd 1f       	adc	r31, r29
     3a2:	80 81       	ld	r24, Z
     3a4:	81 11       	cpse	r24, r1
     3a6:	f7 cf       	rjmp	.-18     	; 0x396 <LCD_write_String+0x10>
	LCD_write_char(a[i]);
}
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	1f 91       	pop	r17
     3ae:	0f 91       	pop	r16
     3b0:	08 95       	ret

000003b2 <LCD_Set_Cursor>:


void LCD_Set_Cursor(char c, char f){
	char temp;
	if (f==1){
     3b2:	61 30       	cpi	r22, 0x01	; 1
     3b4:	21 f4       	brne	.+8      	; 0x3be <LCD_Set_Cursor+0xc>
		temp=0x80+c;
		comandos_LCD(temp);
     3b6:	80 58       	subi	r24, 0x80	; 128
     3b8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <comandos_LCD>
     3bc:	08 95       	ret
		}else if(f==2){
     3be:	62 30       	cpi	r22, 0x02	; 2
     3c0:	19 f4       	brne	.+6      	; 0x3c8 <LCD_Set_Cursor+0x16>
		temp=0xC0+c;
		comandos_LCD(temp);
     3c2:	80 54       	subi	r24, 0x40	; 64
     3c4:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <comandos_LCD>
     3c8:	08 95       	ret

000003ca <LCD_Set_Icon>:
	}
}

void LCD_Set_Icon(uint8_t adress, uint8_t *icon){
     3ca:	0f 93       	push	r16
     3cc:	1f 93       	push	r17
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	8b 01       	movw	r16, r22
	adress&=0x7;
     3d4:	87 70       	andi	r24, 0x07	; 7
	comandos_LCD(0x40+(adress*8));
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	08 96       	adiw	r24, 0x08	; 8
     3da:	88 0f       	add	r24, r24
     3dc:	88 0f       	add	r24, r24
     3de:	88 0f       	add	r24, r24
     3e0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <comandos_LCD>
	int i;
	for (i=0;i<8;i++){
     3e4:	c0 e0       	ldi	r28, 0x00	; 0
     3e6:	d0 e0       	ldi	r29, 0x00	; 0
     3e8:	07 c0       	rjmp	.+14     	; 0x3f8 <LCD_Set_Icon+0x2e>
		LCD_write_char(icon[i]);
     3ea:	f8 01       	movw	r30, r16
     3ec:	ec 0f       	add	r30, r28
     3ee:	fd 1f       	adc	r31, r29
     3f0:	80 81       	ld	r24, Z
     3f2:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_write_char>

void LCD_Set_Icon(uint8_t adress, uint8_t *icon){
	adress&=0x7;
	comandos_LCD(0x40+(adress*8));
	int i;
	for (i=0;i<8;i++){
     3f6:	21 96       	adiw	r28, 0x01	; 1
     3f8:	c8 30       	cpi	r28, 0x08	; 8
     3fa:	d1 05       	cpc	r29, r1
     3fc:	b4 f3       	brlt	.-20     	; 0x3ea <LCD_Set_Icon+0x20>
		LCD_write_char(icon[i]);
	}
}
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	1f 91       	pop	r17
     404:	0f 91       	pop	r16
     406:	08 95       	ret

00000408 <temp_converter>:
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <avr/interrupt.h>

float temp_converter(uint8_t *data){
     408:	0f 93       	push	r16
     40a:	1f 93       	push	r17
     40c:	fc 01       	movw	r30, r24
	uint32_t rawTemp = (((uint32_t)data[3] & 0x0F) << 16) | ((uint32_t)data[4] << 8) | data[5];
     40e:	63 81       	ldd	r22, Z+3	; 0x03
     410:	6f 70       	andi	r22, 0x0F	; 15
     412:	86 2f       	mov	r24, r22
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	a0 e0       	ldi	r26, 0x00	; 0
     418:	b0 e0       	ldi	r27, 0x00	; 0
     41a:	9c 01       	movw	r18, r24
     41c:	11 27       	eor	r17, r17
     41e:	00 27       	eor	r16, r16
     420:	44 81       	ldd	r20, Z+4	; 0x04
     422:	50 e0       	ldi	r21, 0x00	; 0
     424:	60 e0       	ldi	r22, 0x00	; 0
     426:	70 e0       	ldi	r23, 0x00	; 0
     428:	76 2f       	mov	r23, r22
     42a:	65 2f       	mov	r22, r21
     42c:	54 2f       	mov	r21, r20
     42e:	44 27       	eor	r20, r20
     430:	d9 01       	movw	r26, r18
     432:	c8 01       	movw	r24, r16
     434:	84 2b       	or	r24, r20
     436:	95 2b       	or	r25, r21
     438:	a6 2b       	or	r26, r22
     43a:	b7 2b       	or	r27, r23
     43c:	25 81       	ldd	r18, Z+5	; 0x05
     43e:	bc 01       	movw	r22, r24
     440:	cd 01       	movw	r24, r26
     442:	62 2b       	or	r22, r18
	return (rawTemp * 200.0) / 1048576.0 - 50;
     444:	0e 94 4a 04 	call	0x894	; 0x894 <__floatunsisf>
     448:	20 e0       	ldi	r18, 0x00	; 0
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	48 e4       	ldi	r20, 0x48	; 72
     44e:	53 e4       	ldi	r21, 0x43	; 67
     450:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__mulsf3>
     454:	20 e0       	ldi	r18, 0x00	; 0
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	40 e8       	ldi	r20, 0x80	; 128
     45a:	55 e3       	ldi	r21, 0x35	; 53
     45c:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__mulsf3>
     460:	20 e0       	ldi	r18, 0x00	; 0
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	48 e4       	ldi	r20, 0x48	; 72
     466:	52 e4       	ldi	r21, 0x42	; 66
     468:	0e 94 a7 03 	call	0x74e	; 0x74e <__subsf3>
}
     46c:	1f 91       	pop	r17
     46e:	0f 91       	pop	r16
     470:	08 95       	ret

00000472 <main>:

int main(void)
{
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	ea 97       	sbiw	r28, 0x3a	; 58
     47c:	0f b6       	in	r0, 0x3f	; 63
     47e:	f8 94       	cli
     480:	de bf       	out	0x3e, r29	; 62
     482:	0f be       	out	0x3f, r0	; 63
     484:	cd bf       	out	0x3d, r28	; 61
	cli();
     486:	f8 94       	cli
	I2C_Master_Init(100000,1); // Inicializa I2C a 100KHz
     488:	41 e0       	ldi	r20, 0x01	; 1
     48a:	60 ea       	ldi	r22, 0xA0	; 160
     48c:	76 e8       	ldi	r23, 0x86	; 134
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	0e 94 7e 00 	call	0xfc	; 0xfc <I2C_Master_Init>
	initLCD8b();
     496:	0e 94 7e 01 	call	0x2fc	; 0x2fc <initLCD8b>
	initUART9600();
     49a:	0e 94 53 00 	call	0xa6	; 0xa6 <initUART9600>
	sei();
     49e:	78 94       	sei
	
	// Enviar comando de inicialización (si necesario)
	I2C_Master_Start();
     4a0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <I2C_Master_Start>
	temp = I2C_Master_Write((temp_adress << 1) | 0);
     4a4:	80 e7       	ldi	r24, 0x70	; 112
     4a6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <I2C_Master_Write>
     4aa:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <temp>
	I2C_Master_Write(0xE1);
     4ae:	81 ee       	ldi	r24, 0xE1	; 225
     4b0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <I2C_Master_Write>
	I2C_Master_Stop();
     4b4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_Master_Stop>
     4b8:	8f e3       	ldi	r24, 0x3F	; 63
     4ba:	9c e9       	ldi	r25, 0x9C	; 156
     4bc:	01 97       	sbiw	r24, 0x01	; 1
     4be:	f1 f7       	brne	.-4      	; 0x4bc <main+0x4a>
     4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <main+0x50>
     4c2:	00 00       	nop
	_delay_ms(10);

	//cargar icono
	LCD_Set_Icon(0,temp_icon);
     4c4:	60 e0       	ldi	r22, 0x00	; 0
     4c6:	71 e0       	ldi	r23, 0x01	; 1
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_Set_Icon>

	LCD_Set_Cursor(0,1);
     4ce:	61 e0       	ldi	r22, 0x01	; 1
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_Set_Cursor>
	LCD_write_char(0);
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_write_char>

	while (1)
	{
		
		// Enviar comando de medición
		I2C_Master_Start();
     4dc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <I2C_Master_Start>
		temp = I2C_Master_Write((temp_adress << 1) | 0);
     4e0:	80 e7       	ldi	r24, 0x70	; 112
     4e2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <I2C_Master_Write>
     4e6:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <temp>
		if (temp != 1) {
     4ea:	81 30       	cpi	r24, 0x01	; 1
     4ec:	19 f0       	breq	.+6      	; 0x4f4 <main+0x82>
			I2C_Master_Stop();
     4ee:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_Master_Stop>
     4f2:	f4 cf       	rjmp	.-24     	; 0x4dc <main+0x6a>
			continue;
		}

		I2C_Master_Write(0xAC);
     4f4:	8c ea       	ldi	r24, 0xAC	; 172
     4f6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <I2C_Master_Write>
		I2C_Master_Write(0x33);
     4fa:	83 e3       	ldi	r24, 0x33	; 51
     4fc:	0e 94 e6 00 	call	0x1cc	; 0x1cc <I2C_Master_Write>
		I2C_Master_Write(0x00);
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	0e 94 e6 00 	call	0x1cc	; 0x1cc <I2C_Master_Write>
		I2C_Master_Stop();
     506:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_Master_Stop>

		// Esperar hasta que la medición esté lista
		uint8_t estado = 0;
     50a:	1a ae       	std	Y+58, r1	; 0x3a
		do {
			I2C_Master_Start();
     50c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <I2C_Master_Start>
			temp = I2C_Master_Write((temp_adress << 1) | 1);
     510:	81 e7       	ldi	r24, 0x71	; 113
     512:	0e 94 e6 00 	call	0x1cc	; 0x1cc <I2C_Master_Write>
     516:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <temp>
			I2C_Master_Read(&estado, 1);
     51a:	61 e0       	ldi	r22, 0x01	; 1
     51c:	ce 01       	movw	r24, r28
     51e:	ca 96       	adiw	r24, 0x3a	; 58
     520:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Master_Read>
			I2C_Master_Stop();
     524:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_Master_Stop>
		} while (estado & 0x80);
     528:	8a ad       	ldd	r24, Y+58	; 0x3a
     52a:	88 23       	and	r24, r24
     52c:	7c f3       	brlt	.-34     	; 0x50c <main+0x9a>

		// Leer datos
		I2C_Master_Start();
     52e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <I2C_Master_Start>
		temp = I2C_Master_Write((temp_adress << 1) | 1);
     532:	81 e7       	ldi	r24, 0x71	; 113
     534:	0e 94 e6 00 	call	0x1cc	; 0x1cc <I2C_Master_Write>
     538:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <temp>
		for (uint8_t i = 0; i < 6; i++) {
     53c:	10 e0       	ldi	r17, 0x00	; 0
     53e:	0d c0       	rjmp	.+26     	; 0x55a <main+0xe8>
			estado_sT = I2C_Master_Read(&data_Ttemp[i], (i < 5)); // ACK en los primeros 5
     540:	81 2f       	mov	r24, r17
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	61 e0       	ldi	r22, 0x01	; 1
     546:	15 30       	cpi	r17, 0x05	; 5
     548:	08 f0       	brcs	.+2      	; 0x54c <main+0xda>
     54a:	60 e0       	ldi	r22, 0x00	; 0
     54c:	8d 5c       	subi	r24, 0xCD	; 205
     54e:	9e 4f       	sbci	r25, 0xFE	; 254
     550:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Master_Read>
     554:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <estado_sT>
		} while (estado & 0x80);

		// Leer datos
		I2C_Master_Start();
		temp = I2C_Master_Write((temp_adress << 1) | 1);
		for (uint8_t i = 0; i < 6; i++) {
     558:	1f 5f       	subi	r17, 0xFF	; 255
     55a:	16 30       	cpi	r17, 0x06	; 6
     55c:	88 f3       	brcs	.-30     	; 0x540 <main+0xce>
			estado_sT = I2C_Master_Read(&data_Ttemp[i], (i < 5)); // ACK en los primeros 5
		}
		I2C_Master_Stop();
     55e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_Master_Stop>

		// Convertir temperatura
		temperatura = temp_converter(data_Ttemp);
     562:	83 e3       	ldi	r24, 0x33	; 51
     564:	91 e0       	ldi	r25, 0x01	; 1
     566:	0e 94 04 02 	call	0x408	; 0x408 <temp_converter>
     56a:	60 93 49 01 	sts	0x0149, r22	; 0x800149 <temperatura>
     56e:	70 93 4a 01 	sts	0x014A, r23	; 0x80014a <temperatura+0x1>
     572:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <temperatura+0x2>
     576:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <temperatura+0x3>
		temp_f = (int)temperatura;
     57a:	0e 94 14 04 	call	0x828	; 0x828 <__fixsfsi>
     57e:	60 93 4d 01 	sts	0x014D, r22	; 0x80014d <temp_f>
		
		if (temp_f>25){
     582:	6a 31       	cpi	r22, 0x1A	; 26
     584:	20 f0       	brcs	.+8      	; 0x58e <main+0x11c>
			PORTB |= (1 << PORTB4);//enciende turbina
     586:	85 b1       	in	r24, 0x05	; 5
     588:	80 61       	ori	r24, 0x10	; 16
     58a:	85 b9       	out	0x05, r24	; 5
     58c:	03 c0       	rjmp	.+6      	; 0x594 <main+0x122>
		}else{
			PORTB &= ~(1 << PORTB4);//apaga turbina
     58e:	85 b1       	in	r24, 0x05	; 5
     590:	8f 7e       	andi	r24, 0xEF	; 239
     592:	85 b9       	out	0x05, r24	; 5
		}

		// Mostrar en LCD
		LCD_Set_Cursor(1,1);
     594:	61 e0       	ldi	r22, 0x01	; 1
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_Set_Cursor>
		char salida[15];
		sprintf(salida, "%2d'C  ", temp_f);
     59c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <temp_f>
     5a0:	1f 92       	push	r1
     5a2:	8f 93       	push	r24
     5a4:	88 e0       	ldi	r24, 0x08	; 8
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	9f 93       	push	r25
     5aa:	8f 93       	push	r24
     5ac:	8e 01       	movw	r16, r28
     5ae:	0f 5d       	subi	r16, 0xDF	; 223
     5b0:	1f 4f       	sbci	r17, 0xFF	; 255
     5b2:	1f 93       	push	r17
     5b4:	0f 93       	push	r16
     5b6:	0e 94 76 05 	call	0xaec	; 0xaec <sprintf>
		LCD_write_String(salida);
     5ba:	c8 01       	movw	r24, r16
     5bc:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_write_String>

				
		//COMIENZA A LEER EL SENSOR ULTRASONICO
		I2C_Master_Start();
     5c0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <I2C_Master_Start>
		temp = I2C_Master_Write((slave1 << 1) | 1);
     5c4:	81 e2       	ldi	r24, 0x21	; 33
     5c6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <I2C_Master_Write>
     5ca:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <temp>
		for(uint8_t i=0;i<2;i++){
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	10 e0       	ldi	r17, 0x00	; 0
     5dc:	0c c0       	rjmp	.+24     	; 0x5f6 <main+0x184>
			estado_us=I2C_Master_Read(&us_sensor_data[i],i<1);
     5de:	81 2f       	mov	r24, r17
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	61 e0       	ldi	r22, 0x01	; 1
     5e4:	11 11       	cpse	r17, r1
     5e6:	60 e0       	ldi	r22, 0x00	; 0
     5e8:	83 5c       	subi	r24, 0xC3	; 195
     5ea:	9e 4f       	sbci	r25, 0xFE	; 254
     5ec:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Master_Read>
     5f0:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <estado_us>

				
		//COMIENZA A LEER EL SENSOR ULTRASONICO
		I2C_Master_Start();
		temp = I2C_Master_Write((slave1 << 1) | 1);
		for(uint8_t i=0;i<2;i++){
     5f4:	1f 5f       	subi	r17, 0xFF	; 255
     5f6:	12 30       	cpi	r17, 0x02	; 2
     5f8:	90 f3       	brcs	.-28     	; 0x5de <main+0x16c>
			estado_us=I2C_Master_Read(&us_sensor_data[i],i<1);
		}
		I2C_Master_Stop();
     5fa:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_Master_Stop>
		
		distancia=(us_sensor_data[0]<<8)|us_sensor_data[1];
     5fe:	ed e3       	ldi	r30, 0x3D	; 61
     600:	f1 e0       	ldi	r31, 0x01	; 1
     602:	80 81       	ld	r24, Z
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	98 2f       	mov	r25, r24
     608:	88 27       	eor	r24, r24
     60a:	21 81       	ldd	r18, Z+1	; 0x01
     60c:	82 2b       	or	r24, r18
     60e:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <distancia+0x1>
     612:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <distancia>
		LCD_Set_Cursor(0,2);
     616:	62 e0       	ldi	r22, 0x02	; 2
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_Set_Cursor>
		LCD_write_String("D:");
     61e:	80 e1       	ldi	r24, 0x10	; 16
     620:	91 e0       	ldi	r25, 0x01	; 1
     622:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_write_String>
		LCD_Set_Cursor(1,2);
     626:	62 e0       	ldi	r22, 0x02	; 2
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_Set_Cursor>
		char vect_salida[16];
		sprintf(vect_salida, "%d cm  ", distancia);
     62e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <distancia+0x1>
     632:	8f 93       	push	r24
     634:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <distancia>
     638:	8f 93       	push	r24
     63a:	83 e1       	ldi	r24, 0x13	; 19
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	9f 93       	push	r25
     640:	8f 93       	push	r24
     642:	8e 01       	movw	r16, r28
     644:	0f 5e       	subi	r16, 0xEF	; 239
     646:	1f 4f       	sbci	r17, 0xFF	; 255
     648:	1f 93       	push	r17
     64a:	0f 93       	push	r16
     64c:	0e 94 76 05 	call	0xaec	; 0xaec <sprintf>
		LCD_write_String(vect_salida);
     650:	c8 01       	movw	r24, r16
     652:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_write_String>
     656:	9f ef       	ldi	r25, 0xFF	; 255
     658:	2a e6       	ldi	r18, 0x6A	; 106
     65a:	83 e0       	ldi	r24, 0x03	; 3
     65c:	91 50       	subi	r25, 0x01	; 1
     65e:	20 40       	sbci	r18, 0x00	; 0
     660:	80 40       	sbci	r24, 0x00	; 0
     662:	e1 f7       	brne	.-8      	; 0x65c <main+0x1ea>
     664:	00 c0       	rjmp	.+0      	; 0x666 <main+0x1f4>
     666:	00 00       	nop
		_delay_ms(70);
		
		//COMIENZA A LEER EL SENSOR DE PULSO
		I2C_Master_Start();
     668:	0e 94 da 00 	call	0x1b4	; 0x1b4 <I2C_Master_Start>
		temp = I2C_Master_Write((slave2 << 1) | 1);
     66c:	81 e4       	ldi	r24, 0x41	; 65
     66e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <I2C_Master_Write>
     672:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <temp>
		if (temp!=1){
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	81 30       	cpi	r24, 0x01	; 1
     684:	19 f0       	breq	.+6      	; 0x68c <main+0x21a>
			I2C_Master_Stop();
     686:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_Master_Stop>
     68a:	0d c0       	rjmp	.+26     	; 0x6a6 <main+0x234>
		}else{
			TWCR=(1<<TWINT)|(1<<TWEN);
     68c:	84 e8       	ldi	r24, 0x84	; 132
     68e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			while(!(TWCR&(1<<TWINT)));
     692:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     696:	88 23       	and	r24, r24
     698:	e4 f7       	brge	.-8      	; 0x692 <main+0x220>
			s_pulso=TWDR;
     69a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     69e:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
			I2C_Master_Stop();
     6a2:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_Master_Stop>
		}
		LCD_Set_Cursor(6,2);
     6a6:	62 e0       	ldi	r22, 0x02	; 2
     6a8:	86 e0       	ldi	r24, 0x06	; 6
     6aa:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_Set_Cursor>
		LCD_write_String("P:");
     6ae:	8b e1       	ldi	r24, 0x1B	; 27
     6b0:	91 e0       	ldi	r25, 0x01	; 1
     6b2:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_write_String>
		LCD_Set_Cursor(9,2);
     6b6:	62 e0       	ldi	r22, 0x02	; 2
     6b8:	89 e0       	ldi	r24, 0x09	; 9
     6ba:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_Set_Cursor>
		char salida_pulso[16];
		sprintf(salida_pulso,"%d bpm  ",s_pulso);
     6be:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
     6c2:	1f 92       	push	r1
     6c4:	8f 93       	push	r24
     6c6:	8e e1       	ldi	r24, 0x1E	; 30
     6c8:	91 e0       	ldi	r25, 0x01	; 1
     6ca:	9f 93       	push	r25
     6cc:	8f 93       	push	r24
     6ce:	8e 01       	movw	r16, r28
     6d0:	0f 5f       	subi	r16, 0xFF	; 255
     6d2:	1f 4f       	sbci	r17, 0xFF	; 255
     6d4:	1f 93       	push	r17
     6d6:	0f 93       	push	r16
     6d8:	0e 94 76 05 	call	0xaec	; 0xaec <sprintf>
		LCD_write_String(salida_pulso);
     6dc:	c8 01       	movw	r24, r16
     6de:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_write_String>
		
		uint8_t LS_dist=distancia%100;
     6e2:	40 91 2f 01 	lds	r20, 0x012F	; 0x80012f <distancia>
     6e6:	50 91 30 01 	lds	r21, 0x0130	; 0x800130 <distancia+0x1>
     6ea:	9a 01       	movw	r18, r20
     6ec:	36 95       	lsr	r19
     6ee:	27 95       	ror	r18
     6f0:	36 95       	lsr	r19
     6f2:	27 95       	ror	r18
     6f4:	ab e7       	ldi	r26, 0x7B	; 123
     6f6:	b4 e1       	ldi	r27, 0x14	; 20
     6f8:	0e 94 67 05 	call	0xace	; 0xace <__umulhisi3>
     6fc:	96 95       	lsr	r25
     6fe:	87 95       	ror	r24
     700:	64 e6       	ldi	r22, 0x64	; 100
     702:	68 9f       	mul	r22, r24
     704:	90 01       	movw	r18, r0
     706:	69 9f       	mul	r22, r25
     708:	30 0d       	add	r19, r0
     70a:	11 24       	eor	r1, r1
     70c:	ca 01       	movw	r24, r20
     70e:	82 1b       	sub	r24, r18
     710:	93 0b       	sbc	r25, r19
		char mensaje_esp32[10];
		sprintf(mensaje_esp32,"%d%d%d",LS_dist,temp_f,s_pulso);
     712:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <__data_end>
     716:	1f 92       	push	r1
     718:	2f 93       	push	r18
     71a:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <temp_f>
     71e:	1f 92       	push	r1
     720:	2f 93       	push	r18
     722:	99 27       	eor	r25, r25
     724:	9f 93       	push	r25
     726:	8f 93       	push	r24
     728:	87 e2       	ldi	r24, 0x27	; 39
     72a:	91 e0       	ldi	r25, 0x01	; 1
     72c:	9f 93       	push	r25
     72e:	8f 93       	push	r24
     730:	01 5d       	subi	r16, 0xD1	; 209
     732:	1f 4f       	sbci	r17, 0xFF	; 255
     734:	1f 93       	push	r17
     736:	0f 93       	push	r16
     738:	0e 94 76 05 	call	0xaec	; 0xaec <sprintf>
		writetxtUART(mensaje_esp32);
     73c:	c8 01       	movw	r24, r16
     73e:	0e 94 6d 00 	call	0xda	; 0xda <writetxtUART>
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	f8 94       	cli
     746:	de bf       	out	0x3e, r29	; 62
     748:	0f be       	out	0x3f, r0	; 63
     74a:	cd bf       	out	0x3d, r28	; 61
     74c:	c7 ce       	rjmp	.-626    	; 0x4dc <main+0x6a>

0000074e <__subsf3>:
     74e:	50 58       	subi	r21, 0x80	; 128

00000750 <__addsf3>:
     750:	bb 27       	eor	r27, r27
     752:	aa 27       	eor	r26, r26
     754:	0e 94 bf 03 	call	0x77e	; 0x77e <__addsf3x>
     758:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__fp_round>
     75c:	0e 94 90 04 	call	0x920	; 0x920 <__fp_pscA>
     760:	38 f0       	brcs	.+14     	; 0x770 <__addsf3+0x20>
     762:	0e 94 97 04 	call	0x92e	; 0x92e <__fp_pscB>
     766:	20 f0       	brcs	.+8      	; 0x770 <__addsf3+0x20>
     768:	39 f4       	brne	.+14     	; 0x778 <__addsf3+0x28>
     76a:	9f 3f       	cpi	r25, 0xFF	; 255
     76c:	19 f4       	brne	.+6      	; 0x774 <__addsf3+0x24>
     76e:	26 f4       	brtc	.+8      	; 0x778 <__addsf3+0x28>
     770:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__fp_nan>
     774:	0e f4       	brtc	.+2      	; 0x778 <__addsf3+0x28>
     776:	e0 95       	com	r30
     778:	e7 fb       	bst	r30, 7
     77a:	0c 94 87 04 	jmp	0x90e	; 0x90e <__fp_inf>

0000077e <__addsf3x>:
     77e:	e9 2f       	mov	r30, r25
     780:	0e 94 af 04 	call	0x95e	; 0x95e <__fp_split3>
     784:	58 f3       	brcs	.-42     	; 0x75c <__addsf3+0xc>
     786:	ba 17       	cp	r27, r26
     788:	62 07       	cpc	r22, r18
     78a:	73 07       	cpc	r23, r19
     78c:	84 07       	cpc	r24, r20
     78e:	95 07       	cpc	r25, r21
     790:	20 f0       	brcs	.+8      	; 0x79a <__addsf3x+0x1c>
     792:	79 f4       	brne	.+30     	; 0x7b2 <__addsf3x+0x34>
     794:	a6 f5       	brtc	.+104    	; 0x7fe <__addsf3x+0x80>
     796:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__fp_zero>
     79a:	0e f4       	brtc	.+2      	; 0x79e <__addsf3x+0x20>
     79c:	e0 95       	com	r30
     79e:	0b 2e       	mov	r0, r27
     7a0:	ba 2f       	mov	r27, r26
     7a2:	a0 2d       	mov	r26, r0
     7a4:	0b 01       	movw	r0, r22
     7a6:	b9 01       	movw	r22, r18
     7a8:	90 01       	movw	r18, r0
     7aa:	0c 01       	movw	r0, r24
     7ac:	ca 01       	movw	r24, r20
     7ae:	a0 01       	movw	r20, r0
     7b0:	11 24       	eor	r1, r1
     7b2:	ff 27       	eor	r31, r31
     7b4:	59 1b       	sub	r21, r25
     7b6:	99 f0       	breq	.+38     	; 0x7de <__addsf3x+0x60>
     7b8:	59 3f       	cpi	r21, 0xF9	; 249
     7ba:	50 f4       	brcc	.+20     	; 0x7d0 <__addsf3x+0x52>
     7bc:	50 3e       	cpi	r21, 0xE0	; 224
     7be:	68 f1       	brcs	.+90     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     7c0:	1a 16       	cp	r1, r26
     7c2:	f0 40       	sbci	r31, 0x00	; 0
     7c4:	a2 2f       	mov	r26, r18
     7c6:	23 2f       	mov	r18, r19
     7c8:	34 2f       	mov	r19, r20
     7ca:	44 27       	eor	r20, r20
     7cc:	58 5f       	subi	r21, 0xF8	; 248
     7ce:	f3 cf       	rjmp	.-26     	; 0x7b6 <__addsf3x+0x38>
     7d0:	46 95       	lsr	r20
     7d2:	37 95       	ror	r19
     7d4:	27 95       	ror	r18
     7d6:	a7 95       	ror	r26
     7d8:	f0 40       	sbci	r31, 0x00	; 0
     7da:	53 95       	inc	r21
     7dc:	c9 f7       	brne	.-14     	; 0x7d0 <__addsf3x+0x52>
     7de:	7e f4       	brtc	.+30     	; 0x7fe <__addsf3x+0x80>
     7e0:	1f 16       	cp	r1, r31
     7e2:	ba 0b       	sbc	r27, r26
     7e4:	62 0b       	sbc	r22, r18
     7e6:	73 0b       	sbc	r23, r19
     7e8:	84 0b       	sbc	r24, r20
     7ea:	ba f0       	brmi	.+46     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     7ec:	91 50       	subi	r25, 0x01	; 1
     7ee:	a1 f0       	breq	.+40     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     7f0:	ff 0f       	add	r31, r31
     7f2:	bb 1f       	adc	r27, r27
     7f4:	66 1f       	adc	r22, r22
     7f6:	77 1f       	adc	r23, r23
     7f8:	88 1f       	adc	r24, r24
     7fa:	c2 f7       	brpl	.-16     	; 0x7ec <__addsf3x+0x6e>
     7fc:	0e c0       	rjmp	.+28     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     7fe:	ba 0f       	add	r27, r26
     800:	62 1f       	adc	r22, r18
     802:	73 1f       	adc	r23, r19
     804:	84 1f       	adc	r24, r20
     806:	48 f4       	brcc	.+18     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     808:	87 95       	ror	r24
     80a:	77 95       	ror	r23
     80c:	67 95       	ror	r22
     80e:	b7 95       	ror	r27
     810:	f7 95       	ror	r31
     812:	9e 3f       	cpi	r25, 0xFE	; 254
     814:	08 f0       	brcs	.+2      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     816:	b0 cf       	rjmp	.-160    	; 0x778 <__addsf3+0x28>
     818:	93 95       	inc	r25
     81a:	88 0f       	add	r24, r24
     81c:	08 f0       	brcs	.+2      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     81e:	99 27       	eor	r25, r25
     820:	ee 0f       	add	r30, r30
     822:	97 95       	ror	r25
     824:	87 95       	ror	r24
     826:	08 95       	ret

00000828 <__fixsfsi>:
     828:	0e 94 1b 04 	call	0x836	; 0x836 <__fixunssfsi>
     82c:	68 94       	set
     82e:	b1 11       	cpse	r27, r1
     830:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__fp_szero>
     834:	08 95       	ret

00000836 <__fixunssfsi>:
     836:	0e 94 b7 04 	call	0x96e	; 0x96e <__fp_splitA>
     83a:	88 f0       	brcs	.+34     	; 0x85e <__fixunssfsi+0x28>
     83c:	9f 57       	subi	r25, 0x7F	; 127
     83e:	98 f0       	brcs	.+38     	; 0x866 <__fixunssfsi+0x30>
     840:	b9 2f       	mov	r27, r25
     842:	99 27       	eor	r25, r25
     844:	b7 51       	subi	r27, 0x17	; 23
     846:	b0 f0       	brcs	.+44     	; 0x874 <__fixunssfsi+0x3e>
     848:	e1 f0       	breq	.+56     	; 0x882 <__fixunssfsi+0x4c>
     84a:	66 0f       	add	r22, r22
     84c:	77 1f       	adc	r23, r23
     84e:	88 1f       	adc	r24, r24
     850:	99 1f       	adc	r25, r25
     852:	1a f0       	brmi	.+6      	; 0x85a <__fixunssfsi+0x24>
     854:	ba 95       	dec	r27
     856:	c9 f7       	brne	.-14     	; 0x84a <__fixunssfsi+0x14>
     858:	14 c0       	rjmp	.+40     	; 0x882 <__fixunssfsi+0x4c>
     85a:	b1 30       	cpi	r27, 0x01	; 1
     85c:	91 f0       	breq	.+36     	; 0x882 <__fixunssfsi+0x4c>
     85e:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__fp_zero>
     862:	b1 e0       	ldi	r27, 0x01	; 1
     864:	08 95       	ret
     866:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__fp_zero>
     86a:	67 2f       	mov	r22, r23
     86c:	78 2f       	mov	r23, r24
     86e:	88 27       	eor	r24, r24
     870:	b8 5f       	subi	r27, 0xF8	; 248
     872:	39 f0       	breq	.+14     	; 0x882 <__fixunssfsi+0x4c>
     874:	b9 3f       	cpi	r27, 0xF9	; 249
     876:	cc f3       	brlt	.-14     	; 0x86a <__fixunssfsi+0x34>
     878:	86 95       	lsr	r24
     87a:	77 95       	ror	r23
     87c:	67 95       	ror	r22
     87e:	b3 95       	inc	r27
     880:	d9 f7       	brne	.-10     	; 0x878 <__fixunssfsi+0x42>
     882:	3e f4       	brtc	.+14     	; 0x892 <__fixunssfsi+0x5c>
     884:	90 95       	com	r25
     886:	80 95       	com	r24
     888:	70 95       	com	r23
     88a:	61 95       	neg	r22
     88c:	7f 4f       	sbci	r23, 0xFF	; 255
     88e:	8f 4f       	sbci	r24, 0xFF	; 255
     890:	9f 4f       	sbci	r25, 0xFF	; 255
     892:	08 95       	ret

00000894 <__floatunsisf>:
     894:	e8 94       	clt
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__floatsisf+0x12>

00000898 <__floatsisf>:
     898:	97 fb       	bst	r25, 7
     89a:	3e f4       	brtc	.+14     	; 0x8aa <__floatsisf+0x12>
     89c:	90 95       	com	r25
     89e:	80 95       	com	r24
     8a0:	70 95       	com	r23
     8a2:	61 95       	neg	r22
     8a4:	7f 4f       	sbci	r23, 0xFF	; 255
     8a6:	8f 4f       	sbci	r24, 0xFF	; 255
     8a8:	9f 4f       	sbci	r25, 0xFF	; 255
     8aa:	99 23       	and	r25, r25
     8ac:	a9 f0       	breq	.+42     	; 0x8d8 <__floatsisf+0x40>
     8ae:	f9 2f       	mov	r31, r25
     8b0:	96 e9       	ldi	r25, 0x96	; 150
     8b2:	bb 27       	eor	r27, r27
     8b4:	93 95       	inc	r25
     8b6:	f6 95       	lsr	r31
     8b8:	87 95       	ror	r24
     8ba:	77 95       	ror	r23
     8bc:	67 95       	ror	r22
     8be:	b7 95       	ror	r27
     8c0:	f1 11       	cpse	r31, r1
     8c2:	f8 cf       	rjmp	.-16     	; 0x8b4 <__floatsisf+0x1c>
     8c4:	fa f4       	brpl	.+62     	; 0x904 <__stack+0x5>
     8c6:	bb 0f       	add	r27, r27
     8c8:	11 f4       	brne	.+4      	; 0x8ce <__floatsisf+0x36>
     8ca:	60 ff       	sbrs	r22, 0
     8cc:	1b c0       	rjmp	.+54     	; 0x904 <__stack+0x5>
     8ce:	6f 5f       	subi	r22, 0xFF	; 255
     8d0:	7f 4f       	sbci	r23, 0xFF	; 255
     8d2:	8f 4f       	sbci	r24, 0xFF	; 255
     8d4:	9f 4f       	sbci	r25, 0xFF	; 255
     8d6:	16 c0       	rjmp	.+44     	; 0x904 <__stack+0x5>
     8d8:	88 23       	and	r24, r24
     8da:	11 f0       	breq	.+4      	; 0x8e0 <__floatsisf+0x48>
     8dc:	96 e9       	ldi	r25, 0x96	; 150
     8de:	11 c0       	rjmp	.+34     	; 0x902 <__stack+0x3>
     8e0:	77 23       	and	r23, r23
     8e2:	21 f0       	breq	.+8      	; 0x8ec <__floatsisf+0x54>
     8e4:	9e e8       	ldi	r25, 0x8E	; 142
     8e6:	87 2f       	mov	r24, r23
     8e8:	76 2f       	mov	r23, r22
     8ea:	05 c0       	rjmp	.+10     	; 0x8f6 <__floatsisf+0x5e>
     8ec:	66 23       	and	r22, r22
     8ee:	71 f0       	breq	.+28     	; 0x90c <__stack+0xd>
     8f0:	96 e8       	ldi	r25, 0x86	; 134
     8f2:	86 2f       	mov	r24, r22
     8f4:	70 e0       	ldi	r23, 0x00	; 0
     8f6:	60 e0       	ldi	r22, 0x00	; 0
     8f8:	2a f0       	brmi	.+10     	; 0x904 <__stack+0x5>
     8fa:	9a 95       	dec	r25
     8fc:	66 0f       	add	r22, r22
     8fe:	77 1f       	adc	r23, r23
     900:	88 1f       	adc	r24, r24
     902:	da f7       	brpl	.-10     	; 0x8fa <__floatsisf+0x62>
     904:	88 0f       	add	r24, r24
     906:	96 95       	lsr	r25
     908:	87 95       	ror	r24
     90a:	97 f9       	bld	r25, 7
     90c:	08 95       	ret

0000090e <__fp_inf>:
     90e:	97 f9       	bld	r25, 7
     910:	9f 67       	ori	r25, 0x7F	; 127
     912:	80 e8       	ldi	r24, 0x80	; 128
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	08 95       	ret

0000091a <__fp_nan>:
     91a:	9f ef       	ldi	r25, 0xFF	; 255
     91c:	80 ec       	ldi	r24, 0xC0	; 192
     91e:	08 95       	ret

00000920 <__fp_pscA>:
     920:	00 24       	eor	r0, r0
     922:	0a 94       	dec	r0
     924:	16 16       	cp	r1, r22
     926:	17 06       	cpc	r1, r23
     928:	18 06       	cpc	r1, r24
     92a:	09 06       	cpc	r0, r25
     92c:	08 95       	ret

0000092e <__fp_pscB>:
     92e:	00 24       	eor	r0, r0
     930:	0a 94       	dec	r0
     932:	12 16       	cp	r1, r18
     934:	13 06       	cpc	r1, r19
     936:	14 06       	cpc	r1, r20
     938:	05 06       	cpc	r0, r21
     93a:	08 95       	ret

0000093c <__fp_round>:
     93c:	09 2e       	mov	r0, r25
     93e:	03 94       	inc	r0
     940:	00 0c       	add	r0, r0
     942:	11 f4       	brne	.+4      	; 0x948 <__fp_round+0xc>
     944:	88 23       	and	r24, r24
     946:	52 f0       	brmi	.+20     	; 0x95c <__fp_round+0x20>
     948:	bb 0f       	add	r27, r27
     94a:	40 f4       	brcc	.+16     	; 0x95c <__fp_round+0x20>
     94c:	bf 2b       	or	r27, r31
     94e:	11 f4       	brne	.+4      	; 0x954 <__fp_round+0x18>
     950:	60 ff       	sbrs	r22, 0
     952:	04 c0       	rjmp	.+8      	; 0x95c <__fp_round+0x20>
     954:	6f 5f       	subi	r22, 0xFF	; 255
     956:	7f 4f       	sbci	r23, 0xFF	; 255
     958:	8f 4f       	sbci	r24, 0xFF	; 255
     95a:	9f 4f       	sbci	r25, 0xFF	; 255
     95c:	08 95       	ret

0000095e <__fp_split3>:
     95e:	57 fd       	sbrc	r21, 7
     960:	90 58       	subi	r25, 0x80	; 128
     962:	44 0f       	add	r20, r20
     964:	55 1f       	adc	r21, r21
     966:	59 f0       	breq	.+22     	; 0x97e <__fp_splitA+0x10>
     968:	5f 3f       	cpi	r21, 0xFF	; 255
     96a:	71 f0       	breq	.+28     	; 0x988 <__fp_splitA+0x1a>
     96c:	47 95       	ror	r20

0000096e <__fp_splitA>:
     96e:	88 0f       	add	r24, r24
     970:	97 fb       	bst	r25, 7
     972:	99 1f       	adc	r25, r25
     974:	61 f0       	breq	.+24     	; 0x98e <__fp_splitA+0x20>
     976:	9f 3f       	cpi	r25, 0xFF	; 255
     978:	79 f0       	breq	.+30     	; 0x998 <__fp_splitA+0x2a>
     97a:	87 95       	ror	r24
     97c:	08 95       	ret
     97e:	12 16       	cp	r1, r18
     980:	13 06       	cpc	r1, r19
     982:	14 06       	cpc	r1, r20
     984:	55 1f       	adc	r21, r21
     986:	f2 cf       	rjmp	.-28     	; 0x96c <__fp_split3+0xe>
     988:	46 95       	lsr	r20
     98a:	f1 df       	rcall	.-30     	; 0x96e <__fp_splitA>
     98c:	08 c0       	rjmp	.+16     	; 0x99e <__fp_splitA+0x30>
     98e:	16 16       	cp	r1, r22
     990:	17 06       	cpc	r1, r23
     992:	18 06       	cpc	r1, r24
     994:	99 1f       	adc	r25, r25
     996:	f1 cf       	rjmp	.-30     	; 0x97a <__fp_splitA+0xc>
     998:	86 95       	lsr	r24
     99a:	71 05       	cpc	r23, r1
     99c:	61 05       	cpc	r22, r1
     99e:	08 94       	sec
     9a0:	08 95       	ret

000009a2 <__fp_zero>:
     9a2:	e8 94       	clt

000009a4 <__fp_szero>:
     9a4:	bb 27       	eor	r27, r27
     9a6:	66 27       	eor	r22, r22
     9a8:	77 27       	eor	r23, r23
     9aa:	cb 01       	movw	r24, r22
     9ac:	97 f9       	bld	r25, 7
     9ae:	08 95       	ret

000009b0 <__mulsf3>:
     9b0:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__mulsf3x>
     9b4:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__fp_round>
     9b8:	0e 94 90 04 	call	0x920	; 0x920 <__fp_pscA>
     9bc:	38 f0       	brcs	.+14     	; 0x9cc <__mulsf3+0x1c>
     9be:	0e 94 97 04 	call	0x92e	; 0x92e <__fp_pscB>
     9c2:	20 f0       	brcs	.+8      	; 0x9cc <__mulsf3+0x1c>
     9c4:	95 23       	and	r25, r21
     9c6:	11 f0       	breq	.+4      	; 0x9cc <__mulsf3+0x1c>
     9c8:	0c 94 87 04 	jmp	0x90e	; 0x90e <__fp_inf>
     9cc:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__fp_nan>
     9d0:	11 24       	eor	r1, r1
     9d2:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__fp_szero>

000009d6 <__mulsf3x>:
     9d6:	0e 94 af 04 	call	0x95e	; 0x95e <__fp_split3>
     9da:	70 f3       	brcs	.-36     	; 0x9b8 <__mulsf3+0x8>

000009dc <__mulsf3_pse>:
     9dc:	95 9f       	mul	r25, r21
     9de:	c1 f3       	breq	.-16     	; 0x9d0 <__mulsf3+0x20>
     9e0:	95 0f       	add	r25, r21
     9e2:	50 e0       	ldi	r21, 0x00	; 0
     9e4:	55 1f       	adc	r21, r21
     9e6:	62 9f       	mul	r22, r18
     9e8:	f0 01       	movw	r30, r0
     9ea:	72 9f       	mul	r23, r18
     9ec:	bb 27       	eor	r27, r27
     9ee:	f0 0d       	add	r31, r0
     9f0:	b1 1d       	adc	r27, r1
     9f2:	63 9f       	mul	r22, r19
     9f4:	aa 27       	eor	r26, r26
     9f6:	f0 0d       	add	r31, r0
     9f8:	b1 1d       	adc	r27, r1
     9fa:	aa 1f       	adc	r26, r26
     9fc:	64 9f       	mul	r22, r20
     9fe:	66 27       	eor	r22, r22
     a00:	b0 0d       	add	r27, r0
     a02:	a1 1d       	adc	r26, r1
     a04:	66 1f       	adc	r22, r22
     a06:	82 9f       	mul	r24, r18
     a08:	22 27       	eor	r18, r18
     a0a:	b0 0d       	add	r27, r0
     a0c:	a1 1d       	adc	r26, r1
     a0e:	62 1f       	adc	r22, r18
     a10:	73 9f       	mul	r23, r19
     a12:	b0 0d       	add	r27, r0
     a14:	a1 1d       	adc	r26, r1
     a16:	62 1f       	adc	r22, r18
     a18:	83 9f       	mul	r24, r19
     a1a:	a0 0d       	add	r26, r0
     a1c:	61 1d       	adc	r22, r1
     a1e:	22 1f       	adc	r18, r18
     a20:	74 9f       	mul	r23, r20
     a22:	33 27       	eor	r19, r19
     a24:	a0 0d       	add	r26, r0
     a26:	61 1d       	adc	r22, r1
     a28:	23 1f       	adc	r18, r19
     a2a:	84 9f       	mul	r24, r20
     a2c:	60 0d       	add	r22, r0
     a2e:	21 1d       	adc	r18, r1
     a30:	82 2f       	mov	r24, r18
     a32:	76 2f       	mov	r23, r22
     a34:	6a 2f       	mov	r22, r26
     a36:	11 24       	eor	r1, r1
     a38:	9f 57       	subi	r25, 0x7F	; 127
     a3a:	50 40       	sbci	r21, 0x00	; 0
     a3c:	9a f0       	brmi	.+38     	; 0xa64 <__mulsf3_pse+0x88>
     a3e:	f1 f0       	breq	.+60     	; 0xa7c <__mulsf3_pse+0xa0>
     a40:	88 23       	and	r24, r24
     a42:	4a f0       	brmi	.+18     	; 0xa56 <__mulsf3_pse+0x7a>
     a44:	ee 0f       	add	r30, r30
     a46:	ff 1f       	adc	r31, r31
     a48:	bb 1f       	adc	r27, r27
     a4a:	66 1f       	adc	r22, r22
     a4c:	77 1f       	adc	r23, r23
     a4e:	88 1f       	adc	r24, r24
     a50:	91 50       	subi	r25, 0x01	; 1
     a52:	50 40       	sbci	r21, 0x00	; 0
     a54:	a9 f7       	brne	.-22     	; 0xa40 <__mulsf3_pse+0x64>
     a56:	9e 3f       	cpi	r25, 0xFE	; 254
     a58:	51 05       	cpc	r21, r1
     a5a:	80 f0       	brcs	.+32     	; 0xa7c <__mulsf3_pse+0xa0>
     a5c:	0c 94 87 04 	jmp	0x90e	; 0x90e <__fp_inf>
     a60:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__fp_szero>
     a64:	5f 3f       	cpi	r21, 0xFF	; 255
     a66:	e4 f3       	brlt	.-8      	; 0xa60 <__mulsf3_pse+0x84>
     a68:	98 3e       	cpi	r25, 0xE8	; 232
     a6a:	d4 f3       	brlt	.-12     	; 0xa60 <__mulsf3_pse+0x84>
     a6c:	86 95       	lsr	r24
     a6e:	77 95       	ror	r23
     a70:	67 95       	ror	r22
     a72:	b7 95       	ror	r27
     a74:	f7 95       	ror	r31
     a76:	e7 95       	ror	r30
     a78:	9f 5f       	subi	r25, 0xFF	; 255
     a7a:	c1 f7       	brne	.-16     	; 0xa6c <__mulsf3_pse+0x90>
     a7c:	fe 2b       	or	r31, r30
     a7e:	88 0f       	add	r24, r24
     a80:	91 1d       	adc	r25, r1
     a82:	96 95       	lsr	r25
     a84:	87 95       	ror	r24
     a86:	97 f9       	bld	r25, 7
     a88:	08 95       	ret

00000a8a <__udivmodsi4>:
     a8a:	a1 e2       	ldi	r26, 0x21	; 33
     a8c:	1a 2e       	mov	r1, r26
     a8e:	aa 1b       	sub	r26, r26
     a90:	bb 1b       	sub	r27, r27
     a92:	fd 01       	movw	r30, r26
     a94:	0d c0       	rjmp	.+26     	; 0xab0 <__udivmodsi4_ep>

00000a96 <__udivmodsi4_loop>:
     a96:	aa 1f       	adc	r26, r26
     a98:	bb 1f       	adc	r27, r27
     a9a:	ee 1f       	adc	r30, r30
     a9c:	ff 1f       	adc	r31, r31
     a9e:	a2 17       	cp	r26, r18
     aa0:	b3 07       	cpc	r27, r19
     aa2:	e4 07       	cpc	r30, r20
     aa4:	f5 07       	cpc	r31, r21
     aa6:	20 f0       	brcs	.+8      	; 0xab0 <__udivmodsi4_ep>
     aa8:	a2 1b       	sub	r26, r18
     aaa:	b3 0b       	sbc	r27, r19
     aac:	e4 0b       	sbc	r30, r20
     aae:	f5 0b       	sbc	r31, r21

00000ab0 <__udivmodsi4_ep>:
     ab0:	66 1f       	adc	r22, r22
     ab2:	77 1f       	adc	r23, r23
     ab4:	88 1f       	adc	r24, r24
     ab6:	99 1f       	adc	r25, r25
     ab8:	1a 94       	dec	r1
     aba:	69 f7       	brne	.-38     	; 0xa96 <__udivmodsi4_loop>
     abc:	60 95       	com	r22
     abe:	70 95       	com	r23
     ac0:	80 95       	com	r24
     ac2:	90 95       	com	r25
     ac4:	9b 01       	movw	r18, r22
     ac6:	ac 01       	movw	r20, r24
     ac8:	bd 01       	movw	r22, r26
     aca:	cf 01       	movw	r24, r30
     acc:	08 95       	ret

00000ace <__umulhisi3>:
     ace:	a2 9f       	mul	r26, r18
     ad0:	b0 01       	movw	r22, r0
     ad2:	b3 9f       	mul	r27, r19
     ad4:	c0 01       	movw	r24, r0
     ad6:	a3 9f       	mul	r26, r19
     ad8:	70 0d       	add	r23, r0
     ada:	81 1d       	adc	r24, r1
     adc:	11 24       	eor	r1, r1
     ade:	91 1d       	adc	r25, r1
     ae0:	b2 9f       	mul	r27, r18
     ae2:	70 0d       	add	r23, r0
     ae4:	81 1d       	adc	r24, r1
     ae6:	11 24       	eor	r1, r1
     ae8:	91 1d       	adc	r25, r1
     aea:	08 95       	ret

00000aec <sprintf>:
     aec:	ae e0       	ldi	r26, 0x0E	; 14
     aee:	b0 e0       	ldi	r27, 0x00	; 0
     af0:	ec e7       	ldi	r30, 0x7C	; 124
     af2:	f5 e0       	ldi	r31, 0x05	; 5
     af4:	0c 94 37 08 	jmp	0x106e	; 0x106e <__prologue_saves__+0x1c>
     af8:	0d 89       	ldd	r16, Y+21	; 0x15
     afa:	1e 89       	ldd	r17, Y+22	; 0x16
     afc:	86 e0       	ldi	r24, 0x06	; 6
     afe:	8c 83       	std	Y+4, r24	; 0x04
     b00:	1a 83       	std	Y+2, r17	; 0x02
     b02:	09 83       	std	Y+1, r16	; 0x01
     b04:	8f ef       	ldi	r24, 0xFF	; 255
     b06:	9f e7       	ldi	r25, 0x7F	; 127
     b08:	9e 83       	std	Y+6, r25	; 0x06
     b0a:	8d 83       	std	Y+5, r24	; 0x05
     b0c:	ae 01       	movw	r20, r28
     b0e:	47 5e       	subi	r20, 0xE7	; 231
     b10:	5f 4f       	sbci	r21, 0xFF	; 255
     b12:	6f 89       	ldd	r22, Y+23	; 0x17
     b14:	78 8d       	ldd	r23, Y+24	; 0x18
     b16:	ce 01       	movw	r24, r28
     b18:	01 96       	adiw	r24, 0x01	; 1
     b1a:	0e 94 98 05 	call	0xb30	; 0xb30 <vfprintf>
     b1e:	ef 81       	ldd	r30, Y+7	; 0x07
     b20:	f8 85       	ldd	r31, Y+8	; 0x08
     b22:	e0 0f       	add	r30, r16
     b24:	f1 1f       	adc	r31, r17
     b26:	10 82       	st	Z, r1
     b28:	2e 96       	adiw	r28, 0x0e	; 14
     b2a:	e4 e0       	ldi	r30, 0x04	; 4
     b2c:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <__epilogue_restores__+0x1c>

00000b30 <vfprintf>:
     b30:	ab e0       	ldi	r26, 0x0B	; 11
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	ee e9       	ldi	r30, 0x9E	; 158
     b36:	f5 e0       	ldi	r31, 0x05	; 5
     b38:	0c 94 29 08 	jmp	0x1052	; 0x1052 <__prologue_saves__>
     b3c:	6c 01       	movw	r12, r24
     b3e:	7b 01       	movw	r14, r22
     b40:	8a 01       	movw	r16, r20
     b42:	fc 01       	movw	r30, r24
     b44:	17 82       	std	Z+7, r1	; 0x07
     b46:	16 82       	std	Z+6, r1	; 0x06
     b48:	83 81       	ldd	r24, Z+3	; 0x03
     b4a:	81 ff       	sbrs	r24, 1
     b4c:	cc c1       	rjmp	.+920    	; 0xee6 <vfprintf+0x3b6>
     b4e:	ce 01       	movw	r24, r28
     b50:	01 96       	adiw	r24, 0x01	; 1
     b52:	3c 01       	movw	r6, r24
     b54:	f6 01       	movw	r30, r12
     b56:	93 81       	ldd	r25, Z+3	; 0x03
     b58:	f7 01       	movw	r30, r14
     b5a:	93 fd       	sbrc	r25, 3
     b5c:	85 91       	lpm	r24, Z+
     b5e:	93 ff       	sbrs	r25, 3
     b60:	81 91       	ld	r24, Z+
     b62:	7f 01       	movw	r14, r30
     b64:	88 23       	and	r24, r24
     b66:	09 f4       	brne	.+2      	; 0xb6a <vfprintf+0x3a>
     b68:	ba c1       	rjmp	.+884    	; 0xede <vfprintf+0x3ae>
     b6a:	85 32       	cpi	r24, 0x25	; 37
     b6c:	39 f4       	brne	.+14     	; 0xb7c <vfprintf+0x4c>
     b6e:	93 fd       	sbrc	r25, 3
     b70:	85 91       	lpm	r24, Z+
     b72:	93 ff       	sbrs	r25, 3
     b74:	81 91       	ld	r24, Z+
     b76:	7f 01       	movw	r14, r30
     b78:	85 32       	cpi	r24, 0x25	; 37
     b7a:	29 f4       	brne	.+10     	; 0xb86 <vfprintf+0x56>
     b7c:	b6 01       	movw	r22, r12
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	0e 94 8f 07 	call	0xf1e	; 0xf1e <fputc>
     b84:	e7 cf       	rjmp	.-50     	; 0xb54 <vfprintf+0x24>
     b86:	91 2c       	mov	r9, r1
     b88:	21 2c       	mov	r2, r1
     b8a:	31 2c       	mov	r3, r1
     b8c:	ff e1       	ldi	r31, 0x1F	; 31
     b8e:	f3 15       	cp	r31, r3
     b90:	d8 f0       	brcs	.+54     	; 0xbc8 <vfprintf+0x98>
     b92:	8b 32       	cpi	r24, 0x2B	; 43
     b94:	79 f0       	breq	.+30     	; 0xbb4 <vfprintf+0x84>
     b96:	38 f4       	brcc	.+14     	; 0xba6 <vfprintf+0x76>
     b98:	80 32       	cpi	r24, 0x20	; 32
     b9a:	79 f0       	breq	.+30     	; 0xbba <vfprintf+0x8a>
     b9c:	83 32       	cpi	r24, 0x23	; 35
     b9e:	a1 f4       	brne	.+40     	; 0xbc8 <vfprintf+0x98>
     ba0:	23 2d       	mov	r18, r3
     ba2:	20 61       	ori	r18, 0x10	; 16
     ba4:	1d c0       	rjmp	.+58     	; 0xbe0 <vfprintf+0xb0>
     ba6:	8d 32       	cpi	r24, 0x2D	; 45
     ba8:	61 f0       	breq	.+24     	; 0xbc2 <vfprintf+0x92>
     baa:	80 33       	cpi	r24, 0x30	; 48
     bac:	69 f4       	brne	.+26     	; 0xbc8 <vfprintf+0x98>
     bae:	23 2d       	mov	r18, r3
     bb0:	21 60       	ori	r18, 0x01	; 1
     bb2:	16 c0       	rjmp	.+44     	; 0xbe0 <vfprintf+0xb0>
     bb4:	83 2d       	mov	r24, r3
     bb6:	82 60       	ori	r24, 0x02	; 2
     bb8:	38 2e       	mov	r3, r24
     bba:	e3 2d       	mov	r30, r3
     bbc:	e4 60       	ori	r30, 0x04	; 4
     bbe:	3e 2e       	mov	r3, r30
     bc0:	2a c0       	rjmp	.+84     	; 0xc16 <vfprintf+0xe6>
     bc2:	f3 2d       	mov	r31, r3
     bc4:	f8 60       	ori	r31, 0x08	; 8
     bc6:	1d c0       	rjmp	.+58     	; 0xc02 <vfprintf+0xd2>
     bc8:	37 fc       	sbrc	r3, 7
     bca:	2d c0       	rjmp	.+90     	; 0xc26 <vfprintf+0xf6>
     bcc:	20 ed       	ldi	r18, 0xD0	; 208
     bce:	28 0f       	add	r18, r24
     bd0:	2a 30       	cpi	r18, 0x0A	; 10
     bd2:	40 f0       	brcs	.+16     	; 0xbe4 <vfprintf+0xb4>
     bd4:	8e 32       	cpi	r24, 0x2E	; 46
     bd6:	b9 f4       	brne	.+46     	; 0xc06 <vfprintf+0xd6>
     bd8:	36 fc       	sbrc	r3, 6
     bda:	81 c1       	rjmp	.+770    	; 0xede <vfprintf+0x3ae>
     bdc:	23 2d       	mov	r18, r3
     bde:	20 64       	ori	r18, 0x40	; 64
     be0:	32 2e       	mov	r3, r18
     be2:	19 c0       	rjmp	.+50     	; 0xc16 <vfprintf+0xe6>
     be4:	36 fe       	sbrs	r3, 6
     be6:	06 c0       	rjmp	.+12     	; 0xbf4 <vfprintf+0xc4>
     be8:	8a e0       	ldi	r24, 0x0A	; 10
     bea:	98 9e       	mul	r9, r24
     bec:	20 0d       	add	r18, r0
     bee:	11 24       	eor	r1, r1
     bf0:	92 2e       	mov	r9, r18
     bf2:	11 c0       	rjmp	.+34     	; 0xc16 <vfprintf+0xe6>
     bf4:	ea e0       	ldi	r30, 0x0A	; 10
     bf6:	2e 9e       	mul	r2, r30
     bf8:	20 0d       	add	r18, r0
     bfa:	11 24       	eor	r1, r1
     bfc:	22 2e       	mov	r2, r18
     bfe:	f3 2d       	mov	r31, r3
     c00:	f0 62       	ori	r31, 0x20	; 32
     c02:	3f 2e       	mov	r3, r31
     c04:	08 c0       	rjmp	.+16     	; 0xc16 <vfprintf+0xe6>
     c06:	8c 36       	cpi	r24, 0x6C	; 108
     c08:	21 f4       	brne	.+8      	; 0xc12 <vfprintf+0xe2>
     c0a:	83 2d       	mov	r24, r3
     c0c:	80 68       	ori	r24, 0x80	; 128
     c0e:	38 2e       	mov	r3, r24
     c10:	02 c0       	rjmp	.+4      	; 0xc16 <vfprintf+0xe6>
     c12:	88 36       	cpi	r24, 0x68	; 104
     c14:	41 f4       	brne	.+16     	; 0xc26 <vfprintf+0xf6>
     c16:	f7 01       	movw	r30, r14
     c18:	93 fd       	sbrc	r25, 3
     c1a:	85 91       	lpm	r24, Z+
     c1c:	93 ff       	sbrs	r25, 3
     c1e:	81 91       	ld	r24, Z+
     c20:	7f 01       	movw	r14, r30
     c22:	81 11       	cpse	r24, r1
     c24:	b3 cf       	rjmp	.-154    	; 0xb8c <vfprintf+0x5c>
     c26:	98 2f       	mov	r25, r24
     c28:	9f 7d       	andi	r25, 0xDF	; 223
     c2a:	95 54       	subi	r25, 0x45	; 69
     c2c:	93 30       	cpi	r25, 0x03	; 3
     c2e:	28 f4       	brcc	.+10     	; 0xc3a <vfprintf+0x10a>
     c30:	0c 5f       	subi	r16, 0xFC	; 252
     c32:	1f 4f       	sbci	r17, 0xFF	; 255
     c34:	9f e3       	ldi	r25, 0x3F	; 63
     c36:	99 83       	std	Y+1, r25	; 0x01
     c38:	0d c0       	rjmp	.+26     	; 0xc54 <vfprintf+0x124>
     c3a:	83 36       	cpi	r24, 0x63	; 99
     c3c:	31 f0       	breq	.+12     	; 0xc4a <vfprintf+0x11a>
     c3e:	83 37       	cpi	r24, 0x73	; 115
     c40:	71 f0       	breq	.+28     	; 0xc5e <vfprintf+0x12e>
     c42:	83 35       	cpi	r24, 0x53	; 83
     c44:	09 f0       	breq	.+2      	; 0xc48 <vfprintf+0x118>
     c46:	59 c0       	rjmp	.+178    	; 0xcfa <vfprintf+0x1ca>
     c48:	21 c0       	rjmp	.+66     	; 0xc8c <vfprintf+0x15c>
     c4a:	f8 01       	movw	r30, r16
     c4c:	80 81       	ld	r24, Z
     c4e:	89 83       	std	Y+1, r24	; 0x01
     c50:	0e 5f       	subi	r16, 0xFE	; 254
     c52:	1f 4f       	sbci	r17, 0xFF	; 255
     c54:	88 24       	eor	r8, r8
     c56:	83 94       	inc	r8
     c58:	91 2c       	mov	r9, r1
     c5a:	53 01       	movw	r10, r6
     c5c:	13 c0       	rjmp	.+38     	; 0xc84 <vfprintf+0x154>
     c5e:	28 01       	movw	r4, r16
     c60:	f2 e0       	ldi	r31, 0x02	; 2
     c62:	4f 0e       	add	r4, r31
     c64:	51 1c       	adc	r5, r1
     c66:	f8 01       	movw	r30, r16
     c68:	a0 80       	ld	r10, Z
     c6a:	b1 80       	ldd	r11, Z+1	; 0x01
     c6c:	36 fe       	sbrs	r3, 6
     c6e:	03 c0       	rjmp	.+6      	; 0xc76 <vfprintf+0x146>
     c70:	69 2d       	mov	r22, r9
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	02 c0       	rjmp	.+4      	; 0xc7a <vfprintf+0x14a>
     c76:	6f ef       	ldi	r22, 0xFF	; 255
     c78:	7f ef       	ldi	r23, 0xFF	; 255
     c7a:	c5 01       	movw	r24, r10
     c7c:	0e 94 84 07 	call	0xf08	; 0xf08 <strnlen>
     c80:	4c 01       	movw	r8, r24
     c82:	82 01       	movw	r16, r4
     c84:	f3 2d       	mov	r31, r3
     c86:	ff 77       	andi	r31, 0x7F	; 127
     c88:	3f 2e       	mov	r3, r31
     c8a:	16 c0       	rjmp	.+44     	; 0xcb8 <vfprintf+0x188>
     c8c:	28 01       	movw	r4, r16
     c8e:	22 e0       	ldi	r18, 0x02	; 2
     c90:	42 0e       	add	r4, r18
     c92:	51 1c       	adc	r5, r1
     c94:	f8 01       	movw	r30, r16
     c96:	a0 80       	ld	r10, Z
     c98:	b1 80       	ldd	r11, Z+1	; 0x01
     c9a:	36 fe       	sbrs	r3, 6
     c9c:	03 c0       	rjmp	.+6      	; 0xca4 <vfprintf+0x174>
     c9e:	69 2d       	mov	r22, r9
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <vfprintf+0x178>
     ca4:	6f ef       	ldi	r22, 0xFF	; 255
     ca6:	7f ef       	ldi	r23, 0xFF	; 255
     ca8:	c5 01       	movw	r24, r10
     caa:	0e 94 79 07 	call	0xef2	; 0xef2 <strnlen_P>
     cae:	4c 01       	movw	r8, r24
     cb0:	f3 2d       	mov	r31, r3
     cb2:	f0 68       	ori	r31, 0x80	; 128
     cb4:	3f 2e       	mov	r3, r31
     cb6:	82 01       	movw	r16, r4
     cb8:	33 fc       	sbrc	r3, 3
     cba:	1b c0       	rjmp	.+54     	; 0xcf2 <vfprintf+0x1c2>
     cbc:	82 2d       	mov	r24, r2
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	88 16       	cp	r8, r24
     cc2:	99 06       	cpc	r9, r25
     cc4:	b0 f4       	brcc	.+44     	; 0xcf2 <vfprintf+0x1c2>
     cc6:	b6 01       	movw	r22, r12
     cc8:	80 e2       	ldi	r24, 0x20	; 32
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	0e 94 8f 07 	call	0xf1e	; 0xf1e <fputc>
     cd0:	2a 94       	dec	r2
     cd2:	f4 cf       	rjmp	.-24     	; 0xcbc <vfprintf+0x18c>
     cd4:	f5 01       	movw	r30, r10
     cd6:	37 fc       	sbrc	r3, 7
     cd8:	85 91       	lpm	r24, Z+
     cda:	37 fe       	sbrs	r3, 7
     cdc:	81 91       	ld	r24, Z+
     cde:	5f 01       	movw	r10, r30
     ce0:	b6 01       	movw	r22, r12
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	0e 94 8f 07 	call	0xf1e	; 0xf1e <fputc>
     ce8:	21 10       	cpse	r2, r1
     cea:	2a 94       	dec	r2
     cec:	21 e0       	ldi	r18, 0x01	; 1
     cee:	82 1a       	sub	r8, r18
     cf0:	91 08       	sbc	r9, r1
     cf2:	81 14       	cp	r8, r1
     cf4:	91 04       	cpc	r9, r1
     cf6:	71 f7       	brne	.-36     	; 0xcd4 <vfprintf+0x1a4>
     cf8:	e8 c0       	rjmp	.+464    	; 0xeca <vfprintf+0x39a>
     cfa:	84 36       	cpi	r24, 0x64	; 100
     cfc:	11 f0       	breq	.+4      	; 0xd02 <vfprintf+0x1d2>
     cfe:	89 36       	cpi	r24, 0x69	; 105
     d00:	41 f5       	brne	.+80     	; 0xd52 <vfprintf+0x222>
     d02:	f8 01       	movw	r30, r16
     d04:	37 fe       	sbrs	r3, 7
     d06:	07 c0       	rjmp	.+14     	; 0xd16 <vfprintf+0x1e6>
     d08:	60 81       	ld	r22, Z
     d0a:	71 81       	ldd	r23, Z+1	; 0x01
     d0c:	82 81       	ldd	r24, Z+2	; 0x02
     d0e:	93 81       	ldd	r25, Z+3	; 0x03
     d10:	0c 5f       	subi	r16, 0xFC	; 252
     d12:	1f 4f       	sbci	r17, 0xFF	; 255
     d14:	08 c0       	rjmp	.+16     	; 0xd26 <vfprintf+0x1f6>
     d16:	60 81       	ld	r22, Z
     d18:	71 81       	ldd	r23, Z+1	; 0x01
     d1a:	07 2e       	mov	r0, r23
     d1c:	00 0c       	add	r0, r0
     d1e:	88 0b       	sbc	r24, r24
     d20:	99 0b       	sbc	r25, r25
     d22:	0e 5f       	subi	r16, 0xFE	; 254
     d24:	1f 4f       	sbci	r17, 0xFF	; 255
     d26:	f3 2d       	mov	r31, r3
     d28:	ff 76       	andi	r31, 0x6F	; 111
     d2a:	3f 2e       	mov	r3, r31
     d2c:	97 ff       	sbrs	r25, 7
     d2e:	09 c0       	rjmp	.+18     	; 0xd42 <vfprintf+0x212>
     d30:	90 95       	com	r25
     d32:	80 95       	com	r24
     d34:	70 95       	com	r23
     d36:	61 95       	neg	r22
     d38:	7f 4f       	sbci	r23, 0xFF	; 255
     d3a:	8f 4f       	sbci	r24, 0xFF	; 255
     d3c:	9f 4f       	sbci	r25, 0xFF	; 255
     d3e:	f0 68       	ori	r31, 0x80	; 128
     d40:	3f 2e       	mov	r3, r31
     d42:	2a e0       	ldi	r18, 0x0A	; 10
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	a3 01       	movw	r20, r6
     d48:	0e 94 cb 07 	call	0xf96	; 0xf96 <__ultoa_invert>
     d4c:	88 2e       	mov	r8, r24
     d4e:	86 18       	sub	r8, r6
     d50:	45 c0       	rjmp	.+138    	; 0xddc <vfprintf+0x2ac>
     d52:	85 37       	cpi	r24, 0x75	; 117
     d54:	31 f4       	brne	.+12     	; 0xd62 <vfprintf+0x232>
     d56:	23 2d       	mov	r18, r3
     d58:	2f 7e       	andi	r18, 0xEF	; 239
     d5a:	b2 2e       	mov	r11, r18
     d5c:	2a e0       	ldi	r18, 0x0A	; 10
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	25 c0       	rjmp	.+74     	; 0xdac <vfprintf+0x27c>
     d62:	93 2d       	mov	r25, r3
     d64:	99 7f       	andi	r25, 0xF9	; 249
     d66:	b9 2e       	mov	r11, r25
     d68:	8f 36       	cpi	r24, 0x6F	; 111
     d6a:	c1 f0       	breq	.+48     	; 0xd9c <vfprintf+0x26c>
     d6c:	18 f4       	brcc	.+6      	; 0xd74 <vfprintf+0x244>
     d6e:	88 35       	cpi	r24, 0x58	; 88
     d70:	79 f0       	breq	.+30     	; 0xd90 <vfprintf+0x260>
     d72:	b5 c0       	rjmp	.+362    	; 0xede <vfprintf+0x3ae>
     d74:	80 37       	cpi	r24, 0x70	; 112
     d76:	19 f0       	breq	.+6      	; 0xd7e <vfprintf+0x24e>
     d78:	88 37       	cpi	r24, 0x78	; 120
     d7a:	21 f0       	breq	.+8      	; 0xd84 <vfprintf+0x254>
     d7c:	b0 c0       	rjmp	.+352    	; 0xede <vfprintf+0x3ae>
     d7e:	e9 2f       	mov	r30, r25
     d80:	e0 61       	ori	r30, 0x10	; 16
     d82:	be 2e       	mov	r11, r30
     d84:	b4 fe       	sbrs	r11, 4
     d86:	0d c0       	rjmp	.+26     	; 0xda2 <vfprintf+0x272>
     d88:	fb 2d       	mov	r31, r11
     d8a:	f4 60       	ori	r31, 0x04	; 4
     d8c:	bf 2e       	mov	r11, r31
     d8e:	09 c0       	rjmp	.+18     	; 0xda2 <vfprintf+0x272>
     d90:	34 fe       	sbrs	r3, 4
     d92:	0a c0       	rjmp	.+20     	; 0xda8 <vfprintf+0x278>
     d94:	29 2f       	mov	r18, r25
     d96:	26 60       	ori	r18, 0x06	; 6
     d98:	b2 2e       	mov	r11, r18
     d9a:	06 c0       	rjmp	.+12     	; 0xda8 <vfprintf+0x278>
     d9c:	28 e0       	ldi	r18, 0x08	; 8
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	05 c0       	rjmp	.+10     	; 0xdac <vfprintf+0x27c>
     da2:	20 e1       	ldi	r18, 0x10	; 16
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	02 c0       	rjmp	.+4      	; 0xdac <vfprintf+0x27c>
     da8:	20 e1       	ldi	r18, 0x10	; 16
     daa:	32 e0       	ldi	r19, 0x02	; 2
     dac:	f8 01       	movw	r30, r16
     dae:	b7 fe       	sbrs	r11, 7
     db0:	07 c0       	rjmp	.+14     	; 0xdc0 <vfprintf+0x290>
     db2:	60 81       	ld	r22, Z
     db4:	71 81       	ldd	r23, Z+1	; 0x01
     db6:	82 81       	ldd	r24, Z+2	; 0x02
     db8:	93 81       	ldd	r25, Z+3	; 0x03
     dba:	0c 5f       	subi	r16, 0xFC	; 252
     dbc:	1f 4f       	sbci	r17, 0xFF	; 255
     dbe:	06 c0       	rjmp	.+12     	; 0xdcc <vfprintf+0x29c>
     dc0:	60 81       	ld	r22, Z
     dc2:	71 81       	ldd	r23, Z+1	; 0x01
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	0e 5f       	subi	r16, 0xFE	; 254
     dca:	1f 4f       	sbci	r17, 0xFF	; 255
     dcc:	a3 01       	movw	r20, r6
     dce:	0e 94 cb 07 	call	0xf96	; 0xf96 <__ultoa_invert>
     dd2:	88 2e       	mov	r8, r24
     dd4:	86 18       	sub	r8, r6
     dd6:	fb 2d       	mov	r31, r11
     dd8:	ff 77       	andi	r31, 0x7F	; 127
     dda:	3f 2e       	mov	r3, r31
     ddc:	36 fe       	sbrs	r3, 6
     dde:	0d c0       	rjmp	.+26     	; 0xdfa <vfprintf+0x2ca>
     de0:	23 2d       	mov	r18, r3
     de2:	2e 7f       	andi	r18, 0xFE	; 254
     de4:	a2 2e       	mov	r10, r18
     de6:	89 14       	cp	r8, r9
     de8:	58 f4       	brcc	.+22     	; 0xe00 <vfprintf+0x2d0>
     dea:	34 fe       	sbrs	r3, 4
     dec:	0b c0       	rjmp	.+22     	; 0xe04 <vfprintf+0x2d4>
     dee:	32 fc       	sbrc	r3, 2
     df0:	09 c0       	rjmp	.+18     	; 0xe04 <vfprintf+0x2d4>
     df2:	83 2d       	mov	r24, r3
     df4:	8e 7e       	andi	r24, 0xEE	; 238
     df6:	a8 2e       	mov	r10, r24
     df8:	05 c0       	rjmp	.+10     	; 0xe04 <vfprintf+0x2d4>
     dfa:	b8 2c       	mov	r11, r8
     dfc:	a3 2c       	mov	r10, r3
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <vfprintf+0x2d6>
     e00:	b8 2c       	mov	r11, r8
     e02:	01 c0       	rjmp	.+2      	; 0xe06 <vfprintf+0x2d6>
     e04:	b9 2c       	mov	r11, r9
     e06:	a4 fe       	sbrs	r10, 4
     e08:	0f c0       	rjmp	.+30     	; 0xe28 <vfprintf+0x2f8>
     e0a:	fe 01       	movw	r30, r28
     e0c:	e8 0d       	add	r30, r8
     e0e:	f1 1d       	adc	r31, r1
     e10:	80 81       	ld	r24, Z
     e12:	80 33       	cpi	r24, 0x30	; 48
     e14:	21 f4       	brne	.+8      	; 0xe1e <vfprintf+0x2ee>
     e16:	9a 2d       	mov	r25, r10
     e18:	99 7e       	andi	r25, 0xE9	; 233
     e1a:	a9 2e       	mov	r10, r25
     e1c:	09 c0       	rjmp	.+18     	; 0xe30 <vfprintf+0x300>
     e1e:	a2 fe       	sbrs	r10, 2
     e20:	06 c0       	rjmp	.+12     	; 0xe2e <vfprintf+0x2fe>
     e22:	b3 94       	inc	r11
     e24:	b3 94       	inc	r11
     e26:	04 c0       	rjmp	.+8      	; 0xe30 <vfprintf+0x300>
     e28:	8a 2d       	mov	r24, r10
     e2a:	86 78       	andi	r24, 0x86	; 134
     e2c:	09 f0       	breq	.+2      	; 0xe30 <vfprintf+0x300>
     e2e:	b3 94       	inc	r11
     e30:	a3 fc       	sbrc	r10, 3
     e32:	11 c0       	rjmp	.+34     	; 0xe56 <vfprintf+0x326>
     e34:	a0 fe       	sbrs	r10, 0
     e36:	06 c0       	rjmp	.+12     	; 0xe44 <vfprintf+0x314>
     e38:	b2 14       	cp	r11, r2
     e3a:	88 f4       	brcc	.+34     	; 0xe5e <vfprintf+0x32e>
     e3c:	28 0c       	add	r2, r8
     e3e:	92 2c       	mov	r9, r2
     e40:	9b 18       	sub	r9, r11
     e42:	0e c0       	rjmp	.+28     	; 0xe60 <vfprintf+0x330>
     e44:	b2 14       	cp	r11, r2
     e46:	60 f4       	brcc	.+24     	; 0xe60 <vfprintf+0x330>
     e48:	b6 01       	movw	r22, r12
     e4a:	80 e2       	ldi	r24, 0x20	; 32
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <fputc>
     e52:	b3 94       	inc	r11
     e54:	f7 cf       	rjmp	.-18     	; 0xe44 <vfprintf+0x314>
     e56:	b2 14       	cp	r11, r2
     e58:	18 f4       	brcc	.+6      	; 0xe60 <vfprintf+0x330>
     e5a:	2b 18       	sub	r2, r11
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <vfprintf+0x332>
     e5e:	98 2c       	mov	r9, r8
     e60:	21 2c       	mov	r2, r1
     e62:	a4 fe       	sbrs	r10, 4
     e64:	10 c0       	rjmp	.+32     	; 0xe86 <vfprintf+0x356>
     e66:	b6 01       	movw	r22, r12
     e68:	80 e3       	ldi	r24, 0x30	; 48
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <fputc>
     e70:	a2 fe       	sbrs	r10, 2
     e72:	17 c0       	rjmp	.+46     	; 0xea2 <vfprintf+0x372>
     e74:	a1 fc       	sbrc	r10, 1
     e76:	03 c0       	rjmp	.+6      	; 0xe7e <vfprintf+0x34e>
     e78:	88 e7       	ldi	r24, 0x78	; 120
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <vfprintf+0x352>
     e7e:	88 e5       	ldi	r24, 0x58	; 88
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	b6 01       	movw	r22, r12
     e84:	0c c0       	rjmp	.+24     	; 0xe9e <vfprintf+0x36e>
     e86:	8a 2d       	mov	r24, r10
     e88:	86 78       	andi	r24, 0x86	; 134
     e8a:	59 f0       	breq	.+22     	; 0xea2 <vfprintf+0x372>
     e8c:	a1 fe       	sbrs	r10, 1
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <vfprintf+0x364>
     e90:	8b e2       	ldi	r24, 0x2B	; 43
     e92:	01 c0       	rjmp	.+2      	; 0xe96 <vfprintf+0x366>
     e94:	80 e2       	ldi	r24, 0x20	; 32
     e96:	a7 fc       	sbrc	r10, 7
     e98:	8d e2       	ldi	r24, 0x2D	; 45
     e9a:	b6 01       	movw	r22, r12
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <fputc>
     ea2:	89 14       	cp	r8, r9
     ea4:	38 f4       	brcc	.+14     	; 0xeb4 <vfprintf+0x384>
     ea6:	b6 01       	movw	r22, r12
     ea8:	80 e3       	ldi	r24, 0x30	; 48
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	0e 94 8f 07 	call	0xf1e	; 0xf1e <fputc>
     eb0:	9a 94       	dec	r9
     eb2:	f7 cf       	rjmp	.-18     	; 0xea2 <vfprintf+0x372>
     eb4:	8a 94       	dec	r8
     eb6:	f3 01       	movw	r30, r6
     eb8:	e8 0d       	add	r30, r8
     eba:	f1 1d       	adc	r31, r1
     ebc:	80 81       	ld	r24, Z
     ebe:	b6 01       	movw	r22, r12
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0e 94 8f 07 	call	0xf1e	; 0xf1e <fputc>
     ec6:	81 10       	cpse	r8, r1
     ec8:	f5 cf       	rjmp	.-22     	; 0xeb4 <vfprintf+0x384>
     eca:	22 20       	and	r2, r2
     ecc:	09 f4       	brne	.+2      	; 0xed0 <vfprintf+0x3a0>
     ece:	42 ce       	rjmp	.-892    	; 0xb54 <vfprintf+0x24>
     ed0:	b6 01       	movw	r22, r12
     ed2:	80 e2       	ldi	r24, 0x20	; 32
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	0e 94 8f 07 	call	0xf1e	; 0xf1e <fputc>
     eda:	2a 94       	dec	r2
     edc:	f6 cf       	rjmp	.-20     	; 0xeca <vfprintf+0x39a>
     ede:	f6 01       	movw	r30, r12
     ee0:	86 81       	ldd	r24, Z+6	; 0x06
     ee2:	97 81       	ldd	r25, Z+7	; 0x07
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <vfprintf+0x3ba>
     ee6:	8f ef       	ldi	r24, 0xFF	; 255
     ee8:	9f ef       	ldi	r25, 0xFF	; 255
     eea:	2b 96       	adiw	r28, 0x0b	; 11
     eec:	e2 e1       	ldi	r30, 0x12	; 18
     eee:	0c 94 45 08 	jmp	0x108a	; 0x108a <__epilogue_restores__>

00000ef2 <strnlen_P>:
     ef2:	fc 01       	movw	r30, r24
     ef4:	05 90       	lpm	r0, Z+
     ef6:	61 50       	subi	r22, 0x01	; 1
     ef8:	70 40       	sbci	r23, 0x00	; 0
     efa:	01 10       	cpse	r0, r1
     efc:	d8 f7       	brcc	.-10     	; 0xef4 <strnlen_P+0x2>
     efe:	80 95       	com	r24
     f00:	90 95       	com	r25
     f02:	8e 0f       	add	r24, r30
     f04:	9f 1f       	adc	r25, r31
     f06:	08 95       	ret

00000f08 <strnlen>:
     f08:	fc 01       	movw	r30, r24
     f0a:	61 50       	subi	r22, 0x01	; 1
     f0c:	70 40       	sbci	r23, 0x00	; 0
     f0e:	01 90       	ld	r0, Z+
     f10:	01 10       	cpse	r0, r1
     f12:	d8 f7       	brcc	.-10     	; 0xf0a <strnlen+0x2>
     f14:	80 95       	com	r24
     f16:	90 95       	com	r25
     f18:	8e 0f       	add	r24, r30
     f1a:	9f 1f       	adc	r25, r31
     f1c:	08 95       	ret

00000f1e <fputc>:
     f1e:	0f 93       	push	r16
     f20:	1f 93       	push	r17
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	fb 01       	movw	r30, r22
     f28:	23 81       	ldd	r18, Z+3	; 0x03
     f2a:	21 fd       	sbrc	r18, 1
     f2c:	03 c0       	rjmp	.+6      	; 0xf34 <fputc+0x16>
     f2e:	8f ef       	ldi	r24, 0xFF	; 255
     f30:	9f ef       	ldi	r25, 0xFF	; 255
     f32:	2c c0       	rjmp	.+88     	; 0xf8c <fputc+0x6e>
     f34:	22 ff       	sbrs	r18, 2
     f36:	16 c0       	rjmp	.+44     	; 0xf64 <fputc+0x46>
     f38:	46 81       	ldd	r20, Z+6	; 0x06
     f3a:	57 81       	ldd	r21, Z+7	; 0x07
     f3c:	24 81       	ldd	r18, Z+4	; 0x04
     f3e:	35 81       	ldd	r19, Z+5	; 0x05
     f40:	42 17       	cp	r20, r18
     f42:	53 07       	cpc	r21, r19
     f44:	44 f4       	brge	.+16     	; 0xf56 <fputc+0x38>
     f46:	a0 81       	ld	r26, Z
     f48:	b1 81       	ldd	r27, Z+1	; 0x01
     f4a:	9d 01       	movw	r18, r26
     f4c:	2f 5f       	subi	r18, 0xFF	; 255
     f4e:	3f 4f       	sbci	r19, 0xFF	; 255
     f50:	31 83       	std	Z+1, r19	; 0x01
     f52:	20 83       	st	Z, r18
     f54:	8c 93       	st	X, r24
     f56:	26 81       	ldd	r18, Z+6	; 0x06
     f58:	37 81       	ldd	r19, Z+7	; 0x07
     f5a:	2f 5f       	subi	r18, 0xFF	; 255
     f5c:	3f 4f       	sbci	r19, 0xFF	; 255
     f5e:	37 83       	std	Z+7, r19	; 0x07
     f60:	26 83       	std	Z+6, r18	; 0x06
     f62:	14 c0       	rjmp	.+40     	; 0xf8c <fputc+0x6e>
     f64:	8b 01       	movw	r16, r22
     f66:	ec 01       	movw	r28, r24
     f68:	fb 01       	movw	r30, r22
     f6a:	00 84       	ldd	r0, Z+8	; 0x08
     f6c:	f1 85       	ldd	r31, Z+9	; 0x09
     f6e:	e0 2d       	mov	r30, r0
     f70:	09 95       	icall
     f72:	89 2b       	or	r24, r25
     f74:	e1 f6       	brne	.-72     	; 0xf2e <fputc+0x10>
     f76:	d8 01       	movw	r26, r16
     f78:	16 96       	adiw	r26, 0x06	; 6
     f7a:	8d 91       	ld	r24, X+
     f7c:	9c 91       	ld	r25, X
     f7e:	17 97       	sbiw	r26, 0x07	; 7
     f80:	01 96       	adiw	r24, 0x01	; 1
     f82:	17 96       	adiw	r26, 0x07	; 7
     f84:	9c 93       	st	X, r25
     f86:	8e 93       	st	-X, r24
     f88:	16 97       	sbiw	r26, 0x06	; 6
     f8a:	ce 01       	movw	r24, r28
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	08 95       	ret

00000f96 <__ultoa_invert>:
     f96:	fa 01       	movw	r30, r20
     f98:	aa 27       	eor	r26, r26
     f9a:	28 30       	cpi	r18, 0x08	; 8
     f9c:	51 f1       	breq	.+84     	; 0xff2 <__ultoa_invert+0x5c>
     f9e:	20 31       	cpi	r18, 0x10	; 16
     fa0:	81 f1       	breq	.+96     	; 0x1002 <__ultoa_invert+0x6c>
     fa2:	e8 94       	clt
     fa4:	6f 93       	push	r22
     fa6:	6e 7f       	andi	r22, 0xFE	; 254
     fa8:	6e 5f       	subi	r22, 0xFE	; 254
     faa:	7f 4f       	sbci	r23, 0xFF	; 255
     fac:	8f 4f       	sbci	r24, 0xFF	; 255
     fae:	9f 4f       	sbci	r25, 0xFF	; 255
     fb0:	af 4f       	sbci	r26, 0xFF	; 255
     fb2:	b1 e0       	ldi	r27, 0x01	; 1
     fb4:	3e d0       	rcall	.+124    	; 0x1032 <__ultoa_invert+0x9c>
     fb6:	b4 e0       	ldi	r27, 0x04	; 4
     fb8:	3c d0       	rcall	.+120    	; 0x1032 <__ultoa_invert+0x9c>
     fba:	67 0f       	add	r22, r23
     fbc:	78 1f       	adc	r23, r24
     fbe:	89 1f       	adc	r24, r25
     fc0:	9a 1f       	adc	r25, r26
     fc2:	a1 1d       	adc	r26, r1
     fc4:	68 0f       	add	r22, r24
     fc6:	79 1f       	adc	r23, r25
     fc8:	8a 1f       	adc	r24, r26
     fca:	91 1d       	adc	r25, r1
     fcc:	a1 1d       	adc	r26, r1
     fce:	6a 0f       	add	r22, r26
     fd0:	71 1d       	adc	r23, r1
     fd2:	81 1d       	adc	r24, r1
     fd4:	91 1d       	adc	r25, r1
     fd6:	a1 1d       	adc	r26, r1
     fd8:	20 d0       	rcall	.+64     	; 0x101a <__ultoa_invert+0x84>
     fda:	09 f4       	brne	.+2      	; 0xfde <__ultoa_invert+0x48>
     fdc:	68 94       	set
     fde:	3f 91       	pop	r19
     fe0:	2a e0       	ldi	r18, 0x0A	; 10
     fe2:	26 9f       	mul	r18, r22
     fe4:	11 24       	eor	r1, r1
     fe6:	30 19       	sub	r19, r0
     fe8:	30 5d       	subi	r19, 0xD0	; 208
     fea:	31 93       	st	Z+, r19
     fec:	de f6       	brtc	.-74     	; 0xfa4 <__ultoa_invert+0xe>
     fee:	cf 01       	movw	r24, r30
     ff0:	08 95       	ret
     ff2:	46 2f       	mov	r20, r22
     ff4:	47 70       	andi	r20, 0x07	; 7
     ff6:	40 5d       	subi	r20, 0xD0	; 208
     ff8:	41 93       	st	Z+, r20
     ffa:	b3 e0       	ldi	r27, 0x03	; 3
     ffc:	0f d0       	rcall	.+30     	; 0x101c <__ultoa_invert+0x86>
     ffe:	c9 f7       	brne	.-14     	; 0xff2 <__ultoa_invert+0x5c>
    1000:	f6 cf       	rjmp	.-20     	; 0xfee <__ultoa_invert+0x58>
    1002:	46 2f       	mov	r20, r22
    1004:	4f 70       	andi	r20, 0x0F	; 15
    1006:	40 5d       	subi	r20, 0xD0	; 208
    1008:	4a 33       	cpi	r20, 0x3A	; 58
    100a:	18 f0       	brcs	.+6      	; 0x1012 <__ultoa_invert+0x7c>
    100c:	49 5d       	subi	r20, 0xD9	; 217
    100e:	31 fd       	sbrc	r19, 1
    1010:	40 52       	subi	r20, 0x20	; 32
    1012:	41 93       	st	Z+, r20
    1014:	02 d0       	rcall	.+4      	; 0x101a <__ultoa_invert+0x84>
    1016:	a9 f7       	brne	.-22     	; 0x1002 <__ultoa_invert+0x6c>
    1018:	ea cf       	rjmp	.-44     	; 0xfee <__ultoa_invert+0x58>
    101a:	b4 e0       	ldi	r27, 0x04	; 4
    101c:	a6 95       	lsr	r26
    101e:	97 95       	ror	r25
    1020:	87 95       	ror	r24
    1022:	77 95       	ror	r23
    1024:	67 95       	ror	r22
    1026:	ba 95       	dec	r27
    1028:	c9 f7       	brne	.-14     	; 0x101c <__ultoa_invert+0x86>
    102a:	00 97       	sbiw	r24, 0x00	; 0
    102c:	61 05       	cpc	r22, r1
    102e:	71 05       	cpc	r23, r1
    1030:	08 95       	ret
    1032:	9b 01       	movw	r18, r22
    1034:	ac 01       	movw	r20, r24
    1036:	0a 2e       	mov	r0, r26
    1038:	06 94       	lsr	r0
    103a:	57 95       	ror	r21
    103c:	47 95       	ror	r20
    103e:	37 95       	ror	r19
    1040:	27 95       	ror	r18
    1042:	ba 95       	dec	r27
    1044:	c9 f7       	brne	.-14     	; 0x1038 <__ultoa_invert+0xa2>
    1046:	62 0f       	add	r22, r18
    1048:	73 1f       	adc	r23, r19
    104a:	84 1f       	adc	r24, r20
    104c:	95 1f       	adc	r25, r21
    104e:	a0 1d       	adc	r26, r0
    1050:	08 95       	ret

00001052 <__prologue_saves__>:
    1052:	2f 92       	push	r2
    1054:	3f 92       	push	r3
    1056:	4f 92       	push	r4
    1058:	5f 92       	push	r5
    105a:	6f 92       	push	r6
    105c:	7f 92       	push	r7
    105e:	8f 92       	push	r8
    1060:	9f 92       	push	r9
    1062:	af 92       	push	r10
    1064:	bf 92       	push	r11
    1066:	cf 92       	push	r12
    1068:	df 92       	push	r13
    106a:	ef 92       	push	r14
    106c:	ff 92       	push	r15
    106e:	0f 93       	push	r16
    1070:	1f 93       	push	r17
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
    107a:	ca 1b       	sub	r28, r26
    107c:	db 0b       	sbc	r29, r27
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	f8 94       	cli
    1082:	de bf       	out	0x3e, r29	; 62
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	cd bf       	out	0x3d, r28	; 61
    1088:	09 94       	ijmp

0000108a <__epilogue_restores__>:
    108a:	2a 88       	ldd	r2, Y+18	; 0x12
    108c:	39 88       	ldd	r3, Y+17	; 0x11
    108e:	48 88       	ldd	r4, Y+16	; 0x10
    1090:	5f 84       	ldd	r5, Y+15	; 0x0f
    1092:	6e 84       	ldd	r6, Y+14	; 0x0e
    1094:	7d 84       	ldd	r7, Y+13	; 0x0d
    1096:	8c 84       	ldd	r8, Y+12	; 0x0c
    1098:	9b 84       	ldd	r9, Y+11	; 0x0b
    109a:	aa 84       	ldd	r10, Y+10	; 0x0a
    109c:	b9 84       	ldd	r11, Y+9	; 0x09
    109e:	c8 84       	ldd	r12, Y+8	; 0x08
    10a0:	df 80       	ldd	r13, Y+7	; 0x07
    10a2:	ee 80       	ldd	r14, Y+6	; 0x06
    10a4:	fd 80       	ldd	r15, Y+5	; 0x05
    10a6:	0c 81       	ldd	r16, Y+4	; 0x04
    10a8:	1b 81       	ldd	r17, Y+3	; 0x03
    10aa:	aa 81       	ldd	r26, Y+2	; 0x02
    10ac:	b9 81       	ldd	r27, Y+1	; 0x01
    10ae:	ce 0f       	add	r28, r30
    10b0:	d1 1d       	adc	r29, r1
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	f8 94       	cli
    10b6:	de bf       	out	0x3e, r29	; 62
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	cd bf       	out	0x3d, r28	; 61
    10bc:	ed 01       	movw	r28, r26
    10be:	08 95       	ret

000010c0 <_exit>:
    10c0:	f8 94       	cli

000010c2 <__stop_program>:
    10c2:	ff cf       	rjmp	.-2      	; 0x10c2 <__stop_program>
